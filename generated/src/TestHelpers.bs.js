// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var IO = require("./IO.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Types = require("./Types.bs.js");
var Ethers = require("./bindings/Ethers.bs.js");
var Ethers$1 = require("ethers");
var Context = require("./Context.bs.js");
var Logging = require("./Logging.bs.js");
var Handlers = require("./Handlers.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var EventProcessing = require("./EventProcessing.bs.js");
var RegisterHandlers = require("./RegisterHandlers.bs.js");
var TestHelpers_MockDb = require("./TestHelpers_MockDb.bs.js");

RegisterHandlers.registerAllHandlers(undefined);

var MockDb = {
  createMockDb: TestHelpers_MockDb.createMockDb
};

function makeEventProcessor(contextCreator, getLoader, eventWithContextAccessor, eventName, param) {
  var $$event = param.event;
  var chainId = Belt_Option.getWithDefault(param.chainId, 1);
  var logger = Logging.createChild({
        Context: "Test Processor for " + JSON.stringify(Types.eventName_encode(eventName)) + " Event",
        "Chain ID": chainId,
        event: $$event
      });
  var mockDbClone = TestHelpers_MockDb.cloneMockDb(param.mockDb);
  var inMemoryStore = IO.InMemoryStore.make(undefined);
  var context = Curry._4(contextCreator, inMemoryStore, chainId, $$event, logger);
  var loaderContext = Curry._1(context.getLoaderContext, undefined);
  var loader = Curry._1(getLoader, undefined);
  Curry._2(loader, $$event, loaderContext);
  var entityBatch = Curry._1(context.getEntitiesToLoad, undefined);
  TestHelpers_MockDb.loadEntitiesToInMemStore(mockDbClone, entityBatch, inMemoryStore);
  var handlerContextGetter = context.getHandlerContext;
  var eventAndContext_event = Curry._2(eventWithContextAccessor, $$event, handlerContextGetter);
  var eventAndContext = {
    chainId: chainId,
    event: eventAndContext_event
  };
  EventProcessing.eventRouter(eventAndContext, inMemoryStore);
  TestHelpers_MockDb.writeFromMemoryStore(mockDbClone, inMemoryStore);
  return mockDbClone;
}

function makeEventMocker(params, mockEventData) {
  var match = Belt_Option.getWithDefault(mockEventData, {});
  return {
          params: params,
          blockNumber: Belt_Option.getWithDefault(match.blockNumber, 0),
          blockTimestamp: Belt_Option.getWithDefault(match.blockTimestamp, 0),
          blockHash: Belt_Option.getWithDefault(match.blockHash, Ethers$1.ethers.ZeroHash),
          srcAddress: Belt_Option.getWithDefault(match.srcAddress, Ethers.Addresses.defaultAddress),
          transactionHash: Belt_Option.getWithDefault(match.transactionHash, Ethers$1.ethers.ZeroHash),
          transactionIndex: Belt_Option.getWithDefault(match.transactionIndex, 0),
          logIndex: Belt_Option.getWithDefault(match.logIndex, 0)
        };
}

var EventFunctions = {
  DEFAULT_CHAIN_ID: 1,
  makeEventProcessor: makeEventProcessor,
  makeEventMocker: makeEventMocker
};

function processEvent(param) {
  return makeEventProcessor(Context.RewardFxdxVaultContract.AddRewardEvent.contextCreator, Handlers.RewardFxdxVaultContract.AddReward.getLoader, Types.rewardFxdxVaultContract_AddRewardWithContext, /* RewardFxdxVault_AddReward */0, param);
}

function createMockEvent(args) {
  var params_rewardId = Belt_Option.getWithDefault(args.rewardId, Ethers.$$BigInt.zero);
  var params_stakeId = Belt_Option.getWithDefault(args.stakeId, Ethers.$$BigInt.zero);
  var params_rewardAmount = Belt_Option.getWithDefault(args.rewardAmount, Ethers.$$BigInt.zero);
  var params_duration = Belt_Option.getWithDefault(args.duration, Ethers.$$BigInt.zero);
  var params_timestamp = Belt_Option.getWithDefault(args.timestamp, Ethers.$$BigInt.zero);
  var params_account = Belt_Option.getWithDefault(args.account, Ethers.Addresses.defaultAddress);
  var params_isClaimed = Belt_Option.getWithDefault(args.isClaimed, false);
  var params = {
    rewardId: params_rewardId,
    stakeId: params_stakeId,
    rewardAmount: params_rewardAmount,
    duration: params_duration,
    timestamp: params_timestamp,
    account: params_account,
    isClaimed: params_isClaimed
  };
  return makeEventMocker(params, args.mockEventData);
}

var AddReward = {
  processEvent: processEvent,
  createMockEvent: createMockEvent
};

function processEvent$1(param) {
  return makeEventProcessor(Context.RewardFxdxVaultContract.SendRewardEvent.contextCreator, Handlers.RewardFxdxVaultContract.SendReward.getLoader, Types.rewardFxdxVaultContract_SendRewardWithContext, /* RewardFxdxVault_SendReward */1, param);
}

function createMockEvent$1(args) {
  var params_rewardId = Belt_Option.getWithDefault(args.rewardId, Ethers.$$BigInt.zero);
  var params_stakeId = Belt_Option.getWithDefault(args.stakeId, Ethers.$$BigInt.zero);
  var params_rewardAmount = Belt_Option.getWithDefault(args.rewardAmount, Ethers.$$BigInt.zero);
  var params_duration = Belt_Option.getWithDefault(args.duration, Ethers.$$BigInt.zero);
  var params_timestamp = Belt_Option.getWithDefault(args.timestamp, Ethers.$$BigInt.zero);
  var params_account = Belt_Option.getWithDefault(args.account, Ethers.Addresses.defaultAddress);
  var params_isClaimed = Belt_Option.getWithDefault(args.isClaimed, false);
  var params = {
    rewardId: params_rewardId,
    stakeId: params_stakeId,
    rewardAmount: params_rewardAmount,
    duration: params_duration,
    timestamp: params_timestamp,
    account: params_account,
    isClaimed: params_isClaimed
  };
  return makeEventMocker(params, args.mockEventData);
}

var SendReward = {
  processEvent: processEvent$1,
  createMockEvent: createMockEvent$1
};

function processEvent$2(param) {
  return makeEventProcessor(Context.RewardFxdxVaultContract.TotalReservesEvent.contextCreator, Handlers.RewardFxdxVaultContract.TotalReserves.getLoader, Types.rewardFxdxVaultContract_TotalReservesWithContext, /* RewardFxdxVault_TotalReserves */2, param);
}

function createMockEvent$2(args) {
  var params_vault = Belt_Option.getWithDefault(args.vault, Ethers.Addresses.defaultAddress);
  var params_rewardReserves = Belt_Option.getWithDefault(args.rewardReserves, Ethers.$$BigInt.zero);
  var params = {
    vault: params_vault,
    rewardReserves: params_rewardReserves
  };
  return makeEventMocker(params, args.mockEventData);
}

var TotalReserves = {
  processEvent: processEvent$2,
  createMockEvent: createMockEvent$2
};

var RewardFxdxVault = {
  AddReward: AddReward,
  SendReward: SendReward,
  TotalReserves: TotalReserves
};

function processEvent$3(param) {
  return makeEventProcessor(Context.StakedFxdxVaultContract.StakeEvent.contextCreator, Handlers.StakedFxdxVaultContract.Stake.getLoader, Types.stakedFxdxVaultContract_StakeWithContext, /* StakedFxdxVault_Stake */3, param);
}

function createMockEvent$3(args) {
  var params_stakeId = Belt_Option.getWithDefault(args.stakeId, Ethers.$$BigInt.zero);
  var params_amount = Belt_Option.getWithDefault(args.amount, Ethers.$$BigInt.zero);
  var params_duration = Belt_Option.getWithDefault(args.duration, Ethers.$$BigInt.zero);
  var params_rewardInterestRate = Belt_Option.getWithDefault(args.rewardInterestRate, Ethers.$$BigInt.zero);
  var params_timestamp = Belt_Option.getWithDefault(args.timestamp, Ethers.$$BigInt.zero);
  var params_account = Belt_Option.getWithDefault(args.account, Ethers.Addresses.defaultAddress);
  var params_unstaked = Belt_Option.getWithDefault(args.unstaked, false);
  var params = {
    stakeId: params_stakeId,
    amount: params_amount,
    duration: params_duration,
    rewardInterestRate: params_rewardInterestRate,
    timestamp: params_timestamp,
    account: params_account,
    unstaked: params_unstaked
  };
  return makeEventMocker(params, args.mockEventData);
}

var Stake = {
  processEvent: processEvent$3,
  createMockEvent: createMockEvent$3
};

function processEvent$4(param) {
  return makeEventProcessor(Context.StakedFxdxVaultContract.TotalReservesEvent.contextCreator, Handlers.StakedFxdxVaultContract.TotalReserves.getLoader, Types.stakedFxdxVaultContract_TotalReservesWithContext, /* StakedFxdxVault_TotalReserves */4, param);
}

function createMockEvent$4(args) {
  var params_vault = Belt_Option.getWithDefault(args.vault, Ethers.Addresses.defaultAddress);
  var params_reserves = Belt_Option.getWithDefault(args.reserves, Ethers.$$BigInt.zero);
  var params = {
    vault: params_vault,
    reserves: params_reserves
  };
  return makeEventMocker(params, args.mockEventData);
}

var TotalReserves$1 = {
  processEvent: processEvent$4,
  createMockEvent: createMockEvent$4
};

function processEvent$5(param) {
  return makeEventProcessor(Context.StakedFxdxVaultContract.UnstakeEvent.contextCreator, Handlers.StakedFxdxVaultContract.Unstake.getLoader, Types.stakedFxdxVaultContract_UnstakeWithContext, /* StakedFxdxVault_Unstake */5, param);
}

function createMockEvent$5(args) {
  var params_stakeId = Belt_Option.getWithDefault(args.stakeId, Ethers.$$BigInt.zero);
  var params_amount = Belt_Option.getWithDefault(args.amount, Ethers.$$BigInt.zero);
  var params_duration = Belt_Option.getWithDefault(args.duration, Ethers.$$BigInt.zero);
  var params_rewardInterestRate = Belt_Option.getWithDefault(args.rewardInterestRate, Ethers.$$BigInt.zero);
  var params_timestamp = Belt_Option.getWithDefault(args.timestamp, Ethers.$$BigInt.zero);
  var params_account = Belt_Option.getWithDefault(args.account, Ethers.Addresses.defaultAddress);
  var params_unstaked = Belt_Option.getWithDefault(args.unstaked, false);
  var params = {
    stakeId: params_stakeId,
    amount: params_amount,
    duration: params_duration,
    rewardInterestRate: params_rewardInterestRate,
    timestamp: params_timestamp,
    account: params_account,
    unstaked: params_unstaked
  };
  return makeEventMocker(params, args.mockEventData);
}

var Unstake = {
  processEvent: processEvent$5,
  createMockEvent: createMockEvent$5
};

var StakedFxdxVault = {
  Stake: Stake,
  TotalReserves: TotalReserves$1,
  Unstake: Unstake
};

exports.MockDb = MockDb;
exports.EventFunctions = EventFunctions;
exports.RewardFxdxVault = RewardFxdxVault;
exports.StakedFxdxVault = StakedFxdxVault;
/*  Not a pure module */
