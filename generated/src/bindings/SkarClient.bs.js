// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Skar = require("../eventFetching/hypersync/Skar.bs.js");
var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var SkarClientNode = require("skar-client-node");

var unchecksummedEthAddress_encode = Spice.stringToJson;

var unchecksummedEthAddress_decode = Spice.stringFromJson;

function cfg_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "url",
                    false,
                    Spice.stringToJson(v.url)
                  ],
                  [
                    "bearer_token",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.bearer_token)
                  ],
                  [
                    "http_req_timeout_millis",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.http_req_timeout_millis)
                  ]
                ]));
}

function cfg_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var url = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "url"), null));
  if (url.TAG === /* Ok */0) {
    var bearer_token = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "bearer_token"), null));
    if (bearer_token.TAG === /* Ok */0) {
      var http_req_timeout_millis = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "http_req_timeout_millis"), null));
      if (http_req_timeout_millis.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  url: url._0,
                  bearer_token: bearer_token._0,
                  http_req_timeout_millis: http_req_timeout_millis._0
                }
              };
      }
      var e = http_req_timeout_millis._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".http_req_timeout_millis" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = bearer_token._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".bearer_token" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = url._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".url" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

var ResponseTypes = {};

var Internal = {};

function make(cfg) {
  return SkarClientNode.SkarClient.new(cfg_encode(cfg));
}

function sendReq(self, req) {
  return self.sendReq(Skar.QueryTypes.postQueryBody_encode(req));
}

exports.unchecksummedEthAddress_encode = unchecksummedEthAddress_encode;
exports.unchecksummedEthAddress_decode = unchecksummedEthAddress_decode;
exports.cfg_encode = cfg_encode;
exports.cfg_decode = cfg_decode;
exports.ResponseTypes = ResponseTypes;
exports.Internal = Internal;
exports.make = make;
exports.sendReq = sendReq;
/* Skar Not a pure module */
