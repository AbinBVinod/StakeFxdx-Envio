// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var HyperSync = require("./hypersync/HyperSync.bs.js");
var RpcWorker = require("./chainWorkers/RpcWorker.bs.js");
var HyperSyncWorker = require("./chainWorkers/HyperSyncWorker.bs.js");
var RawEventsWorker = require("./chainWorkers/RawEventsWorker.bs.js");

var $$let = HyperSyncWorker.Make(HyperSync.SkarHyperSync);

var SkarWorker_make = $$let.make;

var SkarWorker_stopFetchingEvents = $$let.stopFetchingEvents;

var SkarWorker_startWorker = $$let.startWorker;

var SkarWorker_startFetchingEvents = $$let.startFetchingEvents;

var SkarWorker_addNewRangeQueriedCallback = $$let.addNewRangeQueriedCallback;

var SkarWorker_getLatestFetchedBlockTimestamp = $$let.getLatestFetchedBlockTimestamp;

var SkarWorker_addDynamicContractAndFetchMissingEvents = $$let.addDynamicContractAndFetchMissingEvents;

var SkarWorker = {
  make: SkarWorker_make,
  stopFetchingEvents: SkarWorker_stopFetchingEvents,
  startWorker: SkarWorker_startWorker,
  startFetchingEvents: SkarWorker_startFetchingEvents,
  addNewRangeQueriedCallback: SkarWorker_addNewRangeQueriedCallback,
  getLatestFetchedBlockTimestamp: SkarWorker_getLatestFetchedBlockTimestamp,
  addDynamicContractAndFetchMissingEvents: SkarWorker_addDynamicContractAndFetchMissingEvents
};

var $$let$1 = HyperSyncWorker.Make(HyperSync.EthArchiveHyperSync);

var EthArchiveWorker_make = $$let$1.make;

var EthArchiveWorker_stopFetchingEvents = $$let$1.stopFetchingEvents;

var EthArchiveWorker_startWorker = $$let$1.startWorker;

var EthArchiveWorker_startFetchingEvents = $$let$1.startFetchingEvents;

var EthArchiveWorker_addNewRangeQueriedCallback = $$let$1.addNewRangeQueriedCallback;

var EthArchiveWorker_getLatestFetchedBlockTimestamp = $$let$1.getLatestFetchedBlockTimestamp;

var EthArchiveWorker_addDynamicContractAndFetchMissingEvents = $$let$1.addDynamicContractAndFetchMissingEvents;

var EthArchiveWorker = {
  make: EthArchiveWorker_make,
  stopFetchingEvents: EthArchiveWorker_stopFetchingEvents,
  startWorker: EthArchiveWorker_startWorker,
  startFetchingEvents: EthArchiveWorker_startFetchingEvents,
  addNewRangeQueriedCallback: EthArchiveWorker_addNewRangeQueriedCallback,
  getLatestFetchedBlockTimestamp: EthArchiveWorker_getLatestFetchedBlockTimestamp,
  addDynamicContractAndFetchMissingEvents: EthArchiveWorker_addDynamicContractAndFetchMissingEvents
};

function chainWorkerToChainMod(worker) {
  switch (worker.TAG | 0) {
    case /* Rpc */0 :
        return {
                TAG: /* RpcWorkerMod */0,
                _0: [
                  worker._0,
                  {
                    make: RpcWorker.make,
                    stopFetchingEvents: RpcWorker.stopFetchingEvents,
                    startWorker: RpcWorker.startWorker,
                    startFetchingEvents: RpcWorker.startFetchingEvents,
                    addNewRangeQueriedCallback: RpcWorker.addNewRangeQueriedCallback,
                    getLatestFetchedBlockTimestamp: RpcWorker.getLatestFetchedBlockTimestamp,
                    addDynamicContractAndFetchMissingEvents: RpcWorker.addDynamicContractAndFetchMissingEvents
                  }
                ]
              };
    case /* Skar */1 :
        return {
                TAG: /* SkarWorkerMod */1,
                _0: [
                  worker._0,
                  SkarWorker
                ]
              };
    case /* EthArchive */2 :
        return {
                TAG: /* EthArchiveWorkerMod */2,
                _0: [
                  worker._0,
                  EthArchiveWorker
                ]
              };
    case /* RawEvents */3 :
        return {
                TAG: /* RawEventsWorkerMod */3,
                _0: [
                  worker._0,
                  {
                    make: RawEventsWorker.make,
                    stopFetchingEvents: RawEventsWorker.stopFetchingEvents,
                    startWorker: RawEventsWorker.startWorker,
                    startFetchingEvents: RawEventsWorker.startFetchingEvents,
                    addNewRangeQueriedCallback: RawEventsWorker.addNewRangeQueriedCallback,
                    getLatestFetchedBlockTimestamp: RawEventsWorker.getLatestFetchedBlockTimestamp,
                    addDynamicContractAndFetchMissingEvents: RawEventsWorker.addDynamicContractAndFetchMissingEvents
                  }
                ]
              };
    
  }
}

function startWorker(worker) {
  var w = chainWorkerToChainMod(worker);
  var partial_arg = w._0;
  return function (param, param$1, param$2) {
    return Curry._4(partial_arg[1].startWorker, partial_arg[0], param, param$1, param$2);
  };
}

function startFetchingEvents(worker) {
  var w = chainWorkerToChainMod(worker);
  var partial_arg = w._0;
  return function (param, param$1) {
    return Curry._3(partial_arg[1].startFetchingEvents, partial_arg[0], param, param$1);
  };
}

function addNewRangeQueriedCallback(worker) {
  var w = chainWorkerToChainMod(worker);
  var chainWorkerModTuple = w._0;
  return Curry._1(chainWorkerModTuple[1].addNewRangeQueriedCallback, chainWorkerModTuple[0]);
}

function getLatestFetchedBlockTimestamp(worker) {
  var w = chainWorkerToChainMod(worker);
  var chainWorkerModTuple = w._0;
  return Curry._1(chainWorkerModTuple[1].getLatestFetchedBlockTimestamp, chainWorkerModTuple[0]);
}

function addDynamicContractAndFetchMissingEvents(worker) {
  var w = chainWorkerToChainMod(worker);
  var partial_arg = w._0;
  return function (param, param$1, param$2, param$3) {
    var f = Curry._1(partial_arg[1].addDynamicContractAndFetchMissingEvents, partial_arg[0]);
    return Curry._4(f, param, param$1, param$2, param$3);
  };
}

function make(chainConfig, contractAddressMapping, selectedWorker) {
  switch (selectedWorker.TAG | 0) {
    case /* RpcSelectedWithCallback */0 :
        return {
                TAG: /* Rpc */0,
                _0: RpcWorker.make(selectedWorker._0, contractAddressMapping, chainConfig)
              };
    case /* SkarSelectedWithCallback */1 :
        return {
                TAG: /* Skar */1,
                _0: Curry._3($$let.make, selectedWorker._0, contractAddressMapping, chainConfig)
              };
    case /* EthArchiveSelectedWithCallback */2 :
        return {
                TAG: /* EthArchive */2,
                _0: Curry._3($$let$1.make, selectedWorker._0, contractAddressMapping, chainConfig)
              };
    case /* RawEventsSelectedWithCallback */3 :
        return {
                TAG: /* RawEvents */3,
                _0: RawEventsWorker.make(selectedWorker._0, contractAddressMapping, chainConfig)
              };
    
  }
}

exports.SkarWorker = SkarWorker;
exports.EthArchiveWorker = EthArchiveWorker;
exports.startWorker = startWorker;
exports.startFetchingEvents = startFetchingEvents;
exports.addNewRangeQueriedCallback = addNewRangeQueriedCallback;
exports.getLatestFetchedBlockTimestamp = getLatestFetchedBlockTimestamp;
exports.addDynamicContractAndFetchMissingEvents = addDynamicContractAndFetchMissingEvents;
exports.make = make;
/* let Not a pure module */
