// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var UnexpectedMissingParamsExn = /* @__PURE__ */Caml_exceptions.create("HyperSyncTypes.UnexpectedMissingParamsExn");

function queryErrorToMsq(e) {
  var getMsgFromExn = function (exn) {
    return Belt_Option.getWithDefault(Belt_Option.flatMap(Caml_js_exceptions.as_js_exn(exn), (function (exn) {
                      return exn.message;
                    })), "No message on exception");
  };
  if (e.TAG === /* UnexpectedMissingParams */0) {
    var match = e._0;
    return "" + match.queryName + " query failed due to unexpected missing params on response:\n      " + match.missingParams.join(", ") + "";
  }
  var e$1 = e._0;
  switch (e$1.TAG | 0) {
    case /* Deserialize */0 :
        var e$2 = e$1._0;
        return "Failed to deserialize response: " + e$2.message + "\n        JSON data:\n          " + JSON.stringify(e$2.value) + "";
    case /* FailedToFetch */1 :
        var msg = getMsgFromExn(e$1._0);
        return "Failed during fetch query: " + msg + "";
    case /* FailedToParseJson */2 :
        var msg$1 = getMsgFromExn(e$1._0);
        return "Failed during parse of json: " + msg$1 + "";
    case /* Other */3 :
        var msg$2 = getMsgFromExn(e$1._0);
        return "Failed for unknown reason during query: " + msg$2 + "";
    
  }
}

exports.UnexpectedMissingParamsExn = UnexpectedMissingParamsExn;
exports.queryErrorToMsq = queryErrorToMsq;
/* No side effect */
