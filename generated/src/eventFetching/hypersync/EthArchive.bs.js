// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.bs.js");
var Ethers = require("../../bindings/Ethers.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var QueryHelpers = require("./QueryHelpers.bs.js");

var unchecksummedEthAddress_encode = Spice.stringToJson;

var unchecksummedEthAddress_decode = Spice.stringFromJson;

function blockFieldSelection_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "parentHash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.parentHash)
                  ],
                  [
                    "sha3Uncles",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.sha3Uncles)
                  ],
                  [
                    "miner",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.miner)
                  ],
                  [
                    "stateRoot",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.stateRoot)
                  ],
                  [
                    "transactionsRoot",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.transactionsRoot)
                  ],
                  [
                    "receiptsRoot",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.receiptsRoot)
                  ],
                  [
                    "logsBloom",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.logsBloom)
                  ],
                  [
                    "difficulty",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.difficulty)
                  ],
                  [
                    "number",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.number)
                  ],
                  [
                    "gasLimit",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.gasLimit)
                  ],
                  [
                    "gasUsed",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.gasUsed)
                  ],
                  [
                    "timestamp",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.timestamp)
                  ],
                  [
                    "extraData",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.extraData)
                  ],
                  [
                    "mixHash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.mixHash)
                  ],
                  [
                    "nonce",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.nonce)
                  ],
                  [
                    "totalDifficulty",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.totalDifficulty)
                  ],
                  [
                    "baseFeePerGas",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.baseFeePerGas)
                  ],
                  [
                    "size",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.size)
                  ],
                  [
                    "hash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.hash)
                  ]
                ]));
}

function blockFieldSelection_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var parentHash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "parentHash"), null));
  if (parentHash.TAG === /* Ok */0) {
    var sha3Uncles = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "sha3Uncles"), null));
    if (sha3Uncles.TAG === /* Ok */0) {
      var miner = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "miner"), null));
      if (miner.TAG === /* Ok */0) {
        var stateRoot = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "stateRoot"), null));
        if (stateRoot.TAG === /* Ok */0) {
          var transactionsRoot = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactionsRoot"), null));
          if (transactionsRoot.TAG === /* Ok */0) {
            var receiptsRoot = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiptsRoot"), null));
            if (receiptsRoot.TAG === /* Ok */0) {
              var logsBloom = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "logsBloom"), null));
              if (logsBloom.TAG === /* Ok */0) {
                var difficulty = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "difficulty"), null));
                if (difficulty.TAG === /* Ok */0) {
                  var number = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "number"), null));
                  if (number.TAG === /* Ok */0) {
                    var gasLimit = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gasLimit"), null));
                    if (gasLimit.TAG === /* Ok */0) {
                      var gasUsed = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gasUsed"), null));
                      if (gasUsed.TAG === /* Ok */0) {
                        var timestamp = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
                        if (timestamp.TAG === /* Ok */0) {
                          var extraData = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "extraData"), null));
                          if (extraData.TAG === /* Ok */0) {
                            var mixHash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "mixHash"), null));
                            if (mixHash.TAG === /* Ok */0) {
                              var nonce = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "nonce"), null));
                              if (nonce.TAG === /* Ok */0) {
                                var totalDifficulty = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "totalDifficulty"), null));
                                if (totalDifficulty.TAG === /* Ok */0) {
                                  var baseFeePerGas = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "baseFeePerGas"), null));
                                  if (baseFeePerGas.TAG === /* Ok */0) {
                                    var size = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "size"), null));
                                    if (size.TAG === /* Ok */0) {
                                      var hash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "hash"), null));
                                      if (hash.TAG === /* Ok */0) {
                                        return {
                                                TAG: /* Ok */0,
                                                _0: {
                                                  parentHash: parentHash._0,
                                                  sha3Uncles: sha3Uncles._0,
                                                  miner: miner._0,
                                                  stateRoot: stateRoot._0,
                                                  transactionsRoot: transactionsRoot._0,
                                                  receiptsRoot: receiptsRoot._0,
                                                  logsBloom: logsBloom._0,
                                                  difficulty: difficulty._0,
                                                  number: number._0,
                                                  gasLimit: gasLimit._0,
                                                  gasUsed: gasUsed._0,
                                                  timestamp: timestamp._0,
                                                  extraData: extraData._0,
                                                  mixHash: mixHash._0,
                                                  nonce: nonce._0,
                                                  totalDifficulty: totalDifficulty._0,
                                                  baseFeePerGas: baseFeePerGas._0,
                                                  size: size._0,
                                                  hash: hash._0
                                                }
                                              };
                                      }
                                      var e = hash._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".hash" + e.path,
                                                message: e.message,
                                                value: e.value
                                              }
                                            };
                                    }
                                    var e$1 = size._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".size" + e$1.path,
                                              message: e$1.message,
                                              value: e$1.value
                                            }
                                          };
                                  }
                                  var e$2 = baseFeePerGas._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".baseFeePerGas" + e$2.path,
                                            message: e$2.message,
                                            value: e$2.value
                                          }
                                        };
                                }
                                var e$3 = totalDifficulty._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".totalDifficulty" + e$3.path,
                                          message: e$3.message,
                                          value: e$3.value
                                        }
                                      };
                              }
                              var e$4 = nonce._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".nonce" + e$4.path,
                                        message: e$4.message,
                                        value: e$4.value
                                      }
                                    };
                            }
                            var e$5 = mixHash._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".mixHash" + e$5.path,
                                      message: e$5.message,
                                      value: e$5.value
                                    }
                                  };
                          }
                          var e$6 = extraData._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".extraData" + e$6.path,
                                    message: e$6.message,
                                    value: e$6.value
                                  }
                                };
                        }
                        var e$7 = timestamp._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".timestamp" + e$7.path,
                                  message: e$7.message,
                                  value: e$7.value
                                }
                              };
                      }
                      var e$8 = gasUsed._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".gasUsed" + e$8.path,
                                message: e$8.message,
                                value: e$8.value
                              }
                            };
                    }
                    var e$9 = gasLimit._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".gasLimit" + e$9.path,
                              message: e$9.message,
                              value: e$9.value
                            }
                          };
                  }
                  var e$10 = number._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".number" + e$10.path,
                            message: e$10.message,
                            value: e$10.value
                          }
                        };
                }
                var e$11 = difficulty._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".difficulty" + e$11.path,
                          message: e$11.message,
                          value: e$11.value
                        }
                      };
              }
              var e$12 = logsBloom._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".logsBloom" + e$12.path,
                        message: e$12.message,
                        value: e$12.value
                      }
                    };
            }
            var e$13 = receiptsRoot._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".receiptsRoot" + e$13.path,
                      message: e$13.message,
                      value: e$13.value
                    }
                  };
          }
          var e$14 = transactionsRoot._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".transactionsRoot" + e$14.path,
                    message: e$14.message,
                    value: e$14.value
                  }
                };
        }
        var e$15 = stateRoot._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".stateRoot" + e$15.path,
                  message: e$15.message,
                  value: e$15.value
                }
              };
      }
      var e$16 = miner._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".miner" + e$16.path,
                message: e$16.message,
                value: e$16.value
              }
            };
    }
    var e$17 = sha3Uncles._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".sha3Uncles" + e$17.path,
              message: e$17.message,
              value: e$17.value
            }
          };
  }
  var e$18 = parentHash._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".parentHash" + e$18.path,
            message: e$18.message,
            value: e$18.value
          }
        };
}

function transactionFieldSelection_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "type",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.type)
                  ],
                  [
                    "nonce",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.nonce)
                  ],
                  [
                    "to",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.to)
                  ],
                  [
                    "gas",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.gas)
                  ],
                  [
                    "value",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.value)
                  ],
                  [
                    "input",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.input)
                  ],
                  [
                    "maxPriorityFeePerGas",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.maxPriorityFeePerGas)
                  ],
                  [
                    "maxFeePerGas",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.maxFeePerGas)
                  ],
                  [
                    "yParity",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.yParity)
                  ],
                  [
                    "chainId",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.chainId)
                  ],
                  [
                    "v",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.v)
                  ],
                  [
                    "r",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.r)
                  ],
                  [
                    "s",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.s)
                  ],
                  [
                    "from",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.from)
                  ],
                  [
                    "blockHash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.blockHash)
                  ],
                  [
                    "blockNumber",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.blockNumber)
                  ],
                  [
                    "index",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.index)
                  ],
                  [
                    "gasPrice",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.gasPrice)
                  ],
                  [
                    "hash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.hash)
                  ],
                  [
                    "status",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.status)
                  ]
                ]));
}

function transactionFieldSelection_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var type_ = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "type"), null));
  if (type_.TAG === /* Ok */0) {
    var nonce = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "nonce"), null));
    if (nonce.TAG === /* Ok */0) {
      var to = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "to"), null));
      if (to.TAG === /* Ok */0) {
        var gas = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas"), null));
        if (gas.TAG === /* Ok */0) {
          var value = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "value"), null));
          if (value.TAG === /* Ok */0) {
            var input = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "input"), null));
            if (input.TAG === /* Ok */0) {
              var maxPriorityFeePerGas = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "maxPriorityFeePerGas"), null));
              if (maxPriorityFeePerGas.TAG === /* Ok */0) {
                var maxFeePerGas = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "maxFeePerGas"), null));
                if (maxFeePerGas.TAG === /* Ok */0) {
                  var yParity = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "yParity"), null));
                  if (yParity.TAG === /* Ok */0) {
                    var chainId = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "chainId"), null));
                    if (chainId.TAG === /* Ok */0) {
                      var v$1 = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "v"), null));
                      if (v$1.TAG === /* Ok */0) {
                        var r = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "r"), null));
                        if (r.TAG === /* Ok */0) {
                          var s = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "s"), null));
                          if (s.TAG === /* Ok */0) {
                            var from = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "from"), null));
                            if (from.TAG === /* Ok */0) {
                              var blockHash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockHash"), null));
                              if (blockHash.TAG === /* Ok */0) {
                                var blockNumber = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockNumber"), null));
                                if (blockNumber.TAG === /* Ok */0) {
                                  var index = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "index"), null));
                                  if (index.TAG === /* Ok */0) {
                                    var gasPrice = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gasPrice"), null));
                                    if (gasPrice.TAG === /* Ok */0) {
                                      var hash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "hash"), null));
                                      if (hash.TAG === /* Ok */0) {
                                        var status = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
                                        if (status.TAG === /* Ok */0) {
                                          return {
                                                  TAG: /* Ok */0,
                                                  _0: {
                                                    type: type_._0,
                                                    nonce: nonce._0,
                                                    to: to._0,
                                                    gas: gas._0,
                                                    value: value._0,
                                                    input: input._0,
                                                    maxPriorityFeePerGas: maxPriorityFeePerGas._0,
                                                    maxFeePerGas: maxFeePerGas._0,
                                                    yParity: yParity._0,
                                                    chainId: chainId._0,
                                                    v: v$1._0,
                                                    r: r._0,
                                                    s: s._0,
                                                    from: from._0,
                                                    blockHash: blockHash._0,
                                                    blockNumber: blockNumber._0,
                                                    index: index._0,
                                                    gasPrice: gasPrice._0,
                                                    hash: hash._0,
                                                    status: status._0
                                                  }
                                                };
                                        }
                                        var e = status._0;
                                        return {
                                                TAG: /* Error */1,
                                                _0: {
                                                  path: ".status" + e.path,
                                                  message: e.message,
                                                  value: e.value
                                                }
                                              };
                                      }
                                      var e$1 = hash._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".hash" + e$1.path,
                                                message: e$1.message,
                                                value: e$1.value
                                              }
                                            };
                                    }
                                    var e$2 = gasPrice._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".gasPrice" + e$2.path,
                                              message: e$2.message,
                                              value: e$2.value
                                            }
                                          };
                                  }
                                  var e$3 = index._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".index" + e$3.path,
                                            message: e$3.message,
                                            value: e$3.value
                                          }
                                        };
                                }
                                var e$4 = blockNumber._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".blockNumber" + e$4.path,
                                          message: e$4.message,
                                          value: e$4.value
                                        }
                                      };
                              }
                              var e$5 = blockHash._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".blockHash" + e$5.path,
                                        message: e$5.message,
                                        value: e$5.value
                                      }
                                    };
                            }
                            var e$6 = from._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".from" + e$6.path,
                                      message: e$6.message,
                                      value: e$6.value
                                    }
                                  };
                          }
                          var e$7 = s._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".s" + e$7.path,
                                    message: e$7.message,
                                    value: e$7.value
                                  }
                                };
                        }
                        var e$8 = r._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".r" + e$8.path,
                                  message: e$8.message,
                                  value: e$8.value
                                }
                              };
                      }
                      var e$9 = v$1._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".v" + e$9.path,
                                message: e$9.message,
                                value: e$9.value
                              }
                            };
                    }
                    var e$10 = chainId._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".chainId" + e$10.path,
                              message: e$10.message,
                              value: e$10.value
                            }
                          };
                  }
                  var e$11 = yParity._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".yParity" + e$11.path,
                            message: e$11.message,
                            value: e$11.value
                          }
                        };
                }
                var e$12 = maxFeePerGas._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".maxFeePerGas" + e$12.path,
                          message: e$12.message,
                          value: e$12.value
                        }
                      };
              }
              var e$13 = maxPriorityFeePerGas._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".maxPriorityFeePerGas" + e$13.path,
                        message: e$13.message,
                        value: e$13.value
                      }
                    };
            }
            var e$14 = input._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".input" + e$14.path,
                      message: e$14.message,
                      value: e$14.value
                    }
                  };
          }
          var e$15 = value._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".value" + e$15.path,
                    message: e$15.message,
                    value: e$15.value
                  }
                };
        }
        var e$16 = gas._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".gas" + e$16.path,
                  message: e$16.message,
                  value: e$16.value
                }
              };
      }
      var e$17 = to._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".to" + e$17.path,
                message: e$17.message,
                value: e$17.value
              }
            };
    }
    var e$18 = nonce._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".nonce" + e$18.path,
              message: e$18.message,
              value: e$18.value
            }
          };
  }
  var e$19 = type_._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: "." + ("type" + e$19.path),
            message: e$19.message,
            value: e$19.value
          }
        };
}

function logFieldSelection_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "address",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.address)
                  ],
                  [
                    "blockHash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.blockHash)
                  ],
                  [
                    "blockNumber",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.blockNumber)
                  ],
                  [
                    "data",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.data)
                  ],
                  [
                    "index",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.index)
                  ],
                  [
                    "removed",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.removed)
                  ],
                  [
                    "topics",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.topics)
                  ],
                  [
                    "transactionHash",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.transactionHash)
                  ],
                  [
                    "transactionIndex",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.transactionIndex)
                  ]
                ]));
}

function logFieldSelection_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var address = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
  if (address.TAG === /* Ok */0) {
    var blockHash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockHash"), null));
    if (blockHash.TAG === /* Ok */0) {
      var blockNumber = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockNumber"), null));
      if (blockNumber.TAG === /* Ok */0) {
        var data = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
        if (data.TAG === /* Ok */0) {
          var index = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "index"), null));
          if (index.TAG === /* Ok */0) {
            var removed = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "removed"), null));
            if (removed.TAG === /* Ok */0) {
              var topics = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "topics"), null));
              if (topics.TAG === /* Ok */0) {
                var transactionHash = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactionHash"), null));
                if (transactionHash.TAG === /* Ok */0) {
                  var transactionIndex = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactionIndex"), null));
                  if (transactionIndex.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              address: address._0,
                              blockHash: blockHash._0,
                              blockNumber: blockNumber._0,
                              data: data._0,
                              index: index._0,
                              removed: removed._0,
                              topics: topics._0,
                              transactionHash: transactionHash._0,
                              transactionIndex: transactionIndex._0
                            }
                          };
                  }
                  var e = transactionIndex._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".transactionIndex" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = transactionHash._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".transactionHash" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = topics._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".topics" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = removed._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".removed" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = index._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".index" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = data._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".data" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = blockNumber._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".blockNumber" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = blockHash._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".blockHash" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = address._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".address" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function fieldSelection_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "block",
                    true,
                    Spice.optionToJson(blockFieldSelection_encode, v.block)
                  ],
                  [
                    "transaction",
                    true,
                    Spice.optionToJson(transactionFieldSelection_encode, v.transaction)
                  ],
                  [
                    "log",
                    true,
                    Spice.optionToJson(logFieldSelection_encode, v.log)
                  ]
                ]));
}

function fieldSelection_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var block = Spice.optionFromJson(blockFieldSelection_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block"), null));
  if (block.TAG === /* Ok */0) {
    var transaction = Spice.optionFromJson(transactionFieldSelection_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction"), null));
    if (transaction.TAG === /* Ok */0) {
      var log = Spice.optionFromJson(logFieldSelection_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "log"), null));
      if (log.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  block: block._0,
                  transaction: transaction._0,
                  log: log._0
                }
              };
      }
      var e = log._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".log" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = transaction._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".transaction" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = block._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".block" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function logParams_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "address",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Ethers.ethAddress_encode, param);
                          }), v.address)
                  ],
                  [
                    "topics",
                    false,
                    Spice.arrayToJson((function (param) {
                            return Spice.arrayToJson(Ethers.EventFilter.topic_encode, param);
                          }), v.topics)
                  ],
                  [
                    "fieldSelection",
                    false,
                    fieldSelection_encode(v.fieldSelection)
                  ]
                ]));
}

function logParams_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var address = Spice.optionFromJson((function (param) {
          return Spice.arrayFromJson(Ethers.ethAddress_decode, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
  if (address.TAG === /* Ok */0) {
    var topics = Spice.arrayFromJson((function (param) {
            return Spice.arrayFromJson(Ethers.EventFilter.topic_decode, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "topics"), null));
    if (topics.TAG === /* Ok */0) {
      var fieldSelection = fieldSelection_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "fieldSelection"), null));
      if (fieldSelection.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  address: address._0,
                  topics: topics._0,
                  fieldSelection: fieldSelection._0
                }
              };
      }
      var e = fieldSelection._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".fieldSelection" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = topics._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".topics" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = address._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".address" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function transactionParams_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "address",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Ethers.ethAddress_encode, param);
                          }), v.address)
                  ],
                  [
                    "sighash",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Spice.stringToJson, param);
                          }), v.sighash)
                  ],
                  [
                    "fieldSelection",
                    false,
                    fieldSelection_encode(v.fieldSelection)
                  ]
                ]));
}

function transactionParams_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var address = Spice.optionFromJson((function (param) {
          return Spice.arrayFromJson(Ethers.ethAddress_decode, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
  if (address.TAG === /* Ok */0) {
    var sighash = Spice.optionFromJson((function (param) {
            return Spice.arrayFromJson(Spice.stringFromJson, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "sighash"), null));
    if (sighash.TAG === /* Ok */0) {
      var fieldSelection = fieldSelection_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "fieldSelection"), null));
      if (fieldSelection.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  address: address._0,
                  sighash: sighash._0,
                  fieldSelection: fieldSelection._0
                }
              };
      }
      var e = fieldSelection._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".fieldSelection" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = sighash._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".sighash" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = address._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".address" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function postQueryBody_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "fromBlock",
                    false,
                    Spice.intToJson(v.fromBlock)
                  ],
                  [
                    "toBlock",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.toBlock)
                  ],
                  [
                    "logs",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(logParams_encode, param);
                          }), v.logs)
                  ],
                  [
                    "transactions",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(transactionParams_encode, param);
                          }), v.transactions)
                  ]
                ]));
}

function postQueryBody_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var fromBlock = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "fromBlock"), null));
  if (fromBlock.TAG === /* Ok */0) {
    var toBlock = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "toBlock"), null));
    if (toBlock.TAG === /* Ok */0) {
      var logs = Spice.optionFromJson((function (param) {
              return Spice.arrayFromJson(logParams_decode, param);
            }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "logs"), null));
      if (logs.TAG === /* Ok */0) {
        var transactions = Spice.optionFromJson((function (param) {
                return Spice.arrayFromJson(transactionParams_decode, param);
              }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactions"), null));
        if (transactions.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    fromBlock: fromBlock._0,
                    toBlock: toBlock._0,
                    logs: logs._0,
                    transactions: transactions._0
                  }
                };
        }
        var e = transactions._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".transactions" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = logs._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".logs" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = toBlock._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".toBlock" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = fromBlock._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".fromBlock" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

var QueryTypes = {
  blockFieldSelection_encode: blockFieldSelection_encode,
  blockFieldSelection_decode: blockFieldSelection_decode,
  transactionFieldSelection_encode: transactionFieldSelection_encode,
  transactionFieldSelection_decode: transactionFieldSelection_decode,
  logFieldSelection_encode: logFieldSelection_encode,
  logFieldSelection_decode: logFieldSelection_decode,
  fieldSelection_encode: fieldSelection_encode,
  fieldSelection_decode: fieldSelection_decode,
  logParams_encode: logParams_encode,
  logParams_decode: logParams_decode,
  transactionParams_encode: transactionParams_encode,
  transactionParams_decode: transactionParams_decode,
  postQueryBody_encode: postQueryBody_encode,
  postQueryBody_decode: postQueryBody_decode
};

function blockData_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "parentHash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.parentHash)
                  ],
                  [
                    "sha3Uncles",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.sha3Uncles)
                  ],
                  [
                    "miner",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.miner)
                  ],
                  [
                    "stateRoot",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.stateRoot)
                  ],
                  [
                    "transactionsRoot",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.transactionsRoot)
                  ],
                  [
                    "receiptsRoot",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.receiptsRoot)
                  ],
                  [
                    "logsBloom",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.logsBloom)
                  ],
                  [
                    "difficulty",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.difficulty)
                  ],
                  [
                    "number",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.number)
                  ],
                  [
                    "gasLimit",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasLimit)
                  ],
                  [
                    "gasUsed",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasUsed)
                  ],
                  [
                    "timestamp",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.timestamp)
                  ],
                  [
                    "extraData",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.extraData)
                  ],
                  [
                    "mixHash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.mixHash)
                  ],
                  [
                    "nonce",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.nonce)
                  ],
                  [
                    "totalDifficulty",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.totalDifficulty)
                  ],
                  [
                    "baseFeePerGas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.baseFeePerGas)
                  ],
                  [
                    "size",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.size)
                  ],
                  [
                    "hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.hash)
                  ]
                ]));
}

function blockData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var parentHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "parentHash"), null));
  if (parentHash.TAG === /* Ok */0) {
    var sha3Uncles = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "sha3Uncles"), null));
    if (sha3Uncles.TAG === /* Ok */0) {
      var miner = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "miner"), null));
      if (miner.TAG === /* Ok */0) {
        var stateRoot = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "stateRoot"), null));
        if (stateRoot.TAG === /* Ok */0) {
          var transactionsRoot = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactionsRoot"), null));
          if (transactionsRoot.TAG === /* Ok */0) {
            var receiptsRoot = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiptsRoot"), null));
            if (receiptsRoot.TAG === /* Ok */0) {
              var logsBloom = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "logsBloom"), null));
              if (logsBloom.TAG === /* Ok */0) {
                var difficulty = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "difficulty"), null));
                if (difficulty.TAG === /* Ok */0) {
                  var number = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "number"), null));
                  if (number.TAG === /* Ok */0) {
                    var gasLimit = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gasLimit"), null));
                    if (gasLimit.TAG === /* Ok */0) {
                      var gasUsed = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gasUsed"), null));
                      if (gasUsed.TAG === /* Ok */0) {
                        var timestamp = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
                        if (timestamp.TAG === /* Ok */0) {
                          var extraData = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "extraData"), null));
                          if (extraData.TAG === /* Ok */0) {
                            var mixHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "mixHash"), null));
                            if (mixHash.TAG === /* Ok */0) {
                              var nonce = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "nonce"), null));
                              if (nonce.TAG === /* Ok */0) {
                                var totalDifficulty = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "totalDifficulty"), null));
                                if (totalDifficulty.TAG === /* Ok */0) {
                                  var baseFeePerGas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "baseFeePerGas"), null));
                                  if (baseFeePerGas.TAG === /* Ok */0) {
                                    var size = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "size"), null));
                                    if (size.TAG === /* Ok */0) {
                                      var hash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "hash"), null));
                                      if (hash.TAG === /* Ok */0) {
                                        return {
                                                TAG: /* Ok */0,
                                                _0: {
                                                  parentHash: parentHash._0,
                                                  sha3Uncles: sha3Uncles._0,
                                                  miner: miner._0,
                                                  stateRoot: stateRoot._0,
                                                  transactionsRoot: transactionsRoot._0,
                                                  receiptsRoot: receiptsRoot._0,
                                                  logsBloom: logsBloom._0,
                                                  difficulty: difficulty._0,
                                                  number: number._0,
                                                  gasLimit: gasLimit._0,
                                                  gasUsed: gasUsed._0,
                                                  timestamp: timestamp._0,
                                                  extraData: extraData._0,
                                                  mixHash: mixHash._0,
                                                  nonce: nonce._0,
                                                  totalDifficulty: totalDifficulty._0,
                                                  baseFeePerGas: baseFeePerGas._0,
                                                  size: size._0,
                                                  hash: hash._0
                                                }
                                              };
                                      }
                                      var e = hash._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".hash" + e.path,
                                                message: e.message,
                                                value: e.value
                                              }
                                            };
                                    }
                                    var e$1 = size._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".size" + e$1.path,
                                              message: e$1.message,
                                              value: e$1.value
                                            }
                                          };
                                  }
                                  var e$2 = baseFeePerGas._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".baseFeePerGas" + e$2.path,
                                            message: e$2.message,
                                            value: e$2.value
                                          }
                                        };
                                }
                                var e$3 = totalDifficulty._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".totalDifficulty" + e$3.path,
                                          message: e$3.message,
                                          value: e$3.value
                                        }
                                      };
                              }
                              var e$4 = nonce._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".nonce" + e$4.path,
                                        message: e$4.message,
                                        value: e$4.value
                                      }
                                    };
                            }
                            var e$5 = mixHash._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".mixHash" + e$5.path,
                                      message: e$5.message,
                                      value: e$5.value
                                    }
                                  };
                          }
                          var e$6 = extraData._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".extraData" + e$6.path,
                                    message: e$6.message,
                                    value: e$6.value
                                  }
                                };
                        }
                        var e$7 = timestamp._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".timestamp" + e$7.path,
                                  message: e$7.message,
                                  value: e$7.value
                                }
                              };
                      }
                      var e$8 = gasUsed._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".gasUsed" + e$8.path,
                                message: e$8.message,
                                value: e$8.value
                              }
                            };
                    }
                    var e$9 = gasLimit._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".gasLimit" + e$9.path,
                              message: e$9.message,
                              value: e$9.value
                            }
                          };
                  }
                  var e$10 = number._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".number" + e$10.path,
                            message: e$10.message,
                            value: e$10.value
                          }
                        };
                }
                var e$11 = difficulty._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".difficulty" + e$11.path,
                          message: e$11.message,
                          value: e$11.value
                        }
                      };
              }
              var e$12 = logsBloom._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".logsBloom" + e$12.path,
                        message: e$12.message,
                        value: e$12.value
                      }
                    };
            }
            var e$13 = receiptsRoot._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".receiptsRoot" + e$13.path,
                      message: e$13.message,
                      value: e$13.value
                    }
                  };
          }
          var e$14 = transactionsRoot._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".transactionsRoot" + e$14.path,
                    message: e$14.message,
                    value: e$14.value
                  }
                };
        }
        var e$15 = stateRoot._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".stateRoot" + e$15.path,
                  message: e$15.message,
                  value: e$15.value
                }
              };
      }
      var e$16 = miner._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".miner" + e$16.path,
                message: e$16.message,
                value: e$16.value
              }
            };
    }
    var e$17 = sha3Uncles._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".sha3Uncles" + e$17.path,
              message: e$17.message,
              value: e$17.value
            }
          };
  }
  var e$18 = parentHash._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".parentHash" + e$18.path,
            message: e$18.message,
            value: e$18.value
          }
        };
}

function transactionData_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "type_",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.type)
                  ],
                  [
                    "nonce",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.nonce)
                  ],
                  [
                    "to",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.to)
                  ],
                  [
                    "gas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gas)
                  ],
                  [
                    "value",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.value)
                  ],
                  [
                    "input",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.input)
                  ],
                  [
                    "maxPriorityFeePerGas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.maxPriorityFeePerGas)
                  ],
                  [
                    "maxFeePerGas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.maxFeePerGas)
                  ],
                  [
                    "chainId",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.chainId)
                  ],
                  [
                    "v",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.v)
                  ],
                  [
                    "r",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.r)
                  ],
                  [
                    "s",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.s)
                  ],
                  [
                    "from",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.from)
                  ],
                  [
                    "blockHash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.blockHash)
                  ],
                  [
                    "blockNumber",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.blockNumber)
                  ],
                  [
                    "index",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.index)
                  ],
                  [
                    "gasPrice",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasPrice)
                  ],
                  [
                    "hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.hash)
                  ]
                ]));
}

function transactionData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var type_ = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "type_"), null));
  if (type_.TAG === /* Ok */0) {
    var nonce = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "nonce"), null));
    if (nonce.TAG === /* Ok */0) {
      var to = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "to"), null));
      if (to.TAG === /* Ok */0) {
        var gas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas"), null));
        if (gas.TAG === /* Ok */0) {
          var value = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "value"), null));
          if (value.TAG === /* Ok */0) {
            var input = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "input"), null));
            if (input.TAG === /* Ok */0) {
              var maxPriorityFeePerGas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "maxPriorityFeePerGas"), null));
              if (maxPriorityFeePerGas.TAG === /* Ok */0) {
                var maxFeePerGas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "maxFeePerGas"), null));
                if (maxFeePerGas.TAG === /* Ok */0) {
                  var chainId = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "chainId"), null));
                  if (chainId.TAG === /* Ok */0) {
                    var v$1 = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "v"), null));
                    if (v$1.TAG === /* Ok */0) {
                      var r = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "r"), null));
                      if (r.TAG === /* Ok */0) {
                        var s = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "s"), null));
                        if (s.TAG === /* Ok */0) {
                          var from = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "from"), null));
                          if (from.TAG === /* Ok */0) {
                            var blockHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockHash"), null));
                            if (blockHash.TAG === /* Ok */0) {
                              var blockNumber = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockNumber"), null));
                              if (blockNumber.TAG === /* Ok */0) {
                                var index = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "index"), null));
                                if (index.TAG === /* Ok */0) {
                                  var gasPrice = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gasPrice"), null));
                                  if (gasPrice.TAG === /* Ok */0) {
                                    var hash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "hash"), null));
                                    if (hash.TAG === /* Ok */0) {
                                      return {
                                              TAG: /* Ok */0,
                                              _0: {
                                                type: type_._0,
                                                nonce: nonce._0,
                                                to: to._0,
                                                gas: gas._0,
                                                value: value._0,
                                                input: input._0,
                                                maxPriorityFeePerGas: maxPriorityFeePerGas._0,
                                                maxFeePerGas: maxFeePerGas._0,
                                                chainId: chainId._0,
                                                v: v$1._0,
                                                r: r._0,
                                                s: s._0,
                                                from: from._0,
                                                blockHash: blockHash._0,
                                                blockNumber: blockNumber._0,
                                                index: index._0,
                                                gasPrice: gasPrice._0,
                                                hash: hash._0
                                              }
                                            };
                                    }
                                    var e = hash._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".hash" + e.path,
                                              message: e.message,
                                              value: e.value
                                            }
                                          };
                                  }
                                  var e$1 = gasPrice._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".gasPrice" + e$1.path,
                                            message: e$1.message,
                                            value: e$1.value
                                          }
                                        };
                                }
                                var e$2 = index._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".index" + e$2.path,
                                          message: e$2.message,
                                          value: e$2.value
                                        }
                                      };
                              }
                              var e$3 = blockNumber._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".blockNumber" + e$3.path,
                                        message: e$3.message,
                                        value: e$3.value
                                      }
                                    };
                            }
                            var e$4 = blockHash._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".blockHash" + e$4.path,
                                      message: e$4.message,
                                      value: e$4.value
                                    }
                                  };
                          }
                          var e$5 = from._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".from" + e$5.path,
                                    message: e$5.message,
                                    value: e$5.value
                                  }
                                };
                        }
                        var e$6 = s._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".s" + e$6.path,
                                  message: e$6.message,
                                  value: e$6.value
                                }
                              };
                      }
                      var e$7 = r._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".r" + e$7.path,
                                message: e$7.message,
                                value: e$7.value
                              }
                            };
                    }
                    var e$8 = v$1._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".v" + e$8.path,
                              message: e$8.message,
                              value: e$8.value
                            }
                          };
                  }
                  var e$9 = chainId._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".chainId" + e$9.path,
                            message: e$9.message,
                            value: e$9.value
                          }
                        };
                }
                var e$10 = maxFeePerGas._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".maxFeePerGas" + e$10.path,
                          message: e$10.message,
                          value: e$10.value
                        }
                      };
              }
              var e$11 = maxPriorityFeePerGas._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".maxPriorityFeePerGas" + e$11.path,
                        message: e$11.message,
                        value: e$11.value
                      }
                    };
            }
            var e$12 = input._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".input" + e$12.path,
                      message: e$12.message,
                      value: e$12.value
                    }
                  };
          }
          var e$13 = value._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".value" + e$13.path,
                    message: e$13.message,
                    value: e$13.value
                  }
                };
        }
        var e$14 = gas._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".gas" + e$14.path,
                  message: e$14.message,
                  value: e$14.value
                }
              };
      }
      var e$15 = to._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".to" + e$15.path,
                message: e$15.message,
                value: e$15.value
              }
            };
    }
    var e$16 = nonce._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".nonce" + e$16.path,
              message: e$16.message,
              value: e$16.value
            }
          };
  }
  var e$17 = type_._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".type_" + e$17.path,
            message: e$17.message,
            value: e$17.value
          }
        };
}

function logData_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "address",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.address)
                  ],
                  [
                    "blockHash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.blockHash)
                  ],
                  [
                    "blockNumber",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.blockNumber)
                  ],
                  [
                    "data",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.data)
                  ],
                  [
                    "index",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.index)
                  ],
                  [
                    "removed",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.removed)
                  ],
                  [
                    "topics",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Spice.stringToJson, param);
                          }), v.topics)
                  ],
                  [
                    "transactionHash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.transactionHash)
                  ],
                  [
                    "transactionIndex",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.transactionIndex)
                  ]
                ]));
}

function logData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var address = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
  if (address.TAG === /* Ok */0) {
    var blockHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockHash"), null));
    if (blockHash.TAG === /* Ok */0) {
      var blockNumber = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "blockNumber"), null));
      if (blockNumber.TAG === /* Ok */0) {
        var data = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
        if (data.TAG === /* Ok */0) {
          var index = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "index"), null));
          if (index.TAG === /* Ok */0) {
            var removed = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "removed"), null));
            if (removed.TAG === /* Ok */0) {
              var topics = Spice.optionFromJson((function (param) {
                      return Spice.arrayFromJson(Spice.stringFromJson, param);
                    }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "topics"), null));
              if (topics.TAG === /* Ok */0) {
                var transactionHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactionHash"), null));
                if (transactionHash.TAG === /* Ok */0) {
                  var transactionIndex = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactionIndex"), null));
                  if (transactionIndex.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              address: address._0,
                              blockHash: blockHash._0,
                              blockNumber: blockNumber._0,
                              data: data._0,
                              index: index._0,
                              removed: removed._0,
                              topics: topics._0,
                              transactionHash: transactionHash._0,
                              transactionIndex: transactionIndex._0
                            }
                          };
                  }
                  var e = transactionIndex._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".transactionIndex" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = transactionHash._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".transactionHash" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = topics._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".topics" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = removed._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".removed" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = index._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".index" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = data._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".data" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = blockNumber._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".blockNumber" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = blockHash._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".blockHash" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = address._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".address" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function data_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "block",
                    true,
                    Spice.optionToJson(blockData_encode, v.block)
                  ],
                  [
                    "transactions",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(transactionData_encode, param);
                          }), v.transactions)
                  ],
                  [
                    "logs",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(logData_encode, param);
                          }), v.logs)
                  ]
                ]));
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var block = Spice.optionFromJson(blockData_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block"), null));
  if (block.TAG === /* Ok */0) {
    var transactions = Spice.optionFromJson((function (param) {
            return Spice.arrayFromJson(transactionData_decode, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactions"), null));
    if (transactions.TAG === /* Ok */0) {
      var logs = Spice.optionFromJson((function (param) {
              return Spice.arrayFromJson(logData_decode, param);
            }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "logs"), null));
      if (logs.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  block: block._0,
                  transactions: transactions._0,
                  logs: logs._0
                }
              };
      }
      var e = logs._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".logs" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = transactions._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".transactions" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = block._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".block" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function queryResponse_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "data",
                    false,
                    Spice.arrayToJson((function (param) {
                            return Spice.arrayToJson(data_encode, param);
                          }), v.data)
                  ],
                  [
                    "archiveHeight",
                    false,
                    Spice.intToJson(v.archiveHeight)
                  ],
                  [
                    "nextBlock",
                    false,
                    Spice.intToJson(v.nextBlock)
                  ],
                  [
                    "totalTime",
                    false,
                    Spice.intToJson(v.totalTime)
                  ]
                ]));
}

function queryResponse_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson((function (param) {
          return Spice.arrayFromJson(data_decode, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var archiveHeight = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "archiveHeight"), null));
    if (archiveHeight.TAG === /* Ok */0) {
      var nextBlock = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "nextBlock"), null));
      if (nextBlock.TAG === /* Ok */0) {
        var totalTime = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "totalTime"), null));
        if (totalTime.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    archiveHeight: archiveHeight._0,
                    nextBlock: nextBlock._0,
                    totalTime: totalTime._0
                  }
                };
        }
        var e = totalTime._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".totalTime" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = nextBlock._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".nextBlock" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = archiveHeight._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".archiveHeight" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function heightResponse_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([[
                    "height",
                    false,
                    Spice.intToJson(v.height)
                  ]]));
}

function heightResponse_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var height = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "height"), null));
  if (height.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              height: height._0
            }
          };
  }
  var e = height._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".height" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

var ResponseTypes = {
  blockData_encode: blockData_encode,
  blockData_decode: blockData_decode,
  transactionData_encode: transactionData_encode,
  transactionData_decode: transactionData_decode,
  logData_encode: logData_encode,
  logData_decode: logData_decode,
  data_encode: data_encode,
  data_decode: data_decode,
  queryResponse_encode: queryResponse_encode,
  queryResponse_decode: queryResponse_decode,
  heightResponse_encode: heightResponse_encode,
  heightResponse_decode: heightResponse_decode
};

function executeEthArchiveQuery(serverUrl, postQueryBody) {
  return QueryHelpers.executeFetchRequest(serverUrl + "/query", "POST", [
              postQueryBody,
              postQueryBody_encode
            ], queryResponse_decode, undefined);
}

async function getArchiveHeight(serverUrl) {
  var res = await QueryHelpers.executeFetchRequest(serverUrl + "/height", "GET", undefined, heightResponse_decode, undefined);
  return Belt_Result.map(res, (function (res) {
                return res.height;
              }));
}

exports.unchecksummedEthAddress_encode = unchecksummedEthAddress_encode;
exports.unchecksummedEthAddress_decode = unchecksummedEthAddress_decode;
exports.QueryTypes = QueryTypes;
exports.ResponseTypes = ResponseTypes;
exports.executeEthArchiveQuery = executeEthArchiveQuery;
exports.getArchiveHeight = getArchiveHeight;
/* Ethers Not a pure module */
