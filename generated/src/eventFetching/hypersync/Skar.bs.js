// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.bs.js");
var Ethers = require("../../bindings/Ethers.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var EthArchive = require("./EthArchive.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var QueryHelpers = require("./QueryHelpers.bs.js");

var unchecksummedEthAddress_encode = Spice.stringToJson;

var unchecksummedEthAddress_decode = Spice.stringFromJson;

function blockFieldOptions_encode(v) {
  switch (v) {
    case /* Number */0 :
        return "number";
    case /* Hash */1 :
        return "hash";
    case /* ParentHash */2 :
        return "parent_hash";
    case /* Nonce */3 :
        return "nonce";
    case /* Sha3Uncles */4 :
        return "sha3_uncles";
    case /* LogsBloom */5 :
        return "logs_bloom";
    case /* TransactionsRoot */6 :
        return "transactions_root";
    case /* StateRoot */7 :
        return "state_root";
    case /* ReceiptsRoot */8 :
        return "receipts_root";
    case /* Miner */9 :
        return "miner";
    case /* Difficulty */10 :
        return "difficulty";
    case /* TotalDifficulty */11 :
        return "total_difficulty";
    case /* ExtraData */12 :
        return "extra_data";
    case /* Size */13 :
        return "size";
    case /* GasLimit */14 :
        return "gas_limit";
    case /* GasUsed */15 :
        return "gas_used";
    case /* Timestamp */16 :
        return "timestamp";
    case /* Uncles */17 :
        return "uncles";
    case /* BaseFeePerGas */18 :
        return "base_fee_per_gas";
    
  }
}

function blockFieldOptions_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("number" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Number */0
          };
  } else if ("hash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Hash */1
          };
  } else if ("parent_hash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ParentHash */2
          };
  } else if ("nonce" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Nonce */3
          };
  } else if ("sha3_uncles" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Sha3Uncles */4
          };
  } else if ("logs_bloom" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* LogsBloom */5
          };
  } else if ("transactions_root" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* TransactionsRoot */6
          };
  } else if ("state_root" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* StateRoot */7
          };
  } else if ("receipts_root" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ReceiptsRoot */8
          };
  } else if ("miner" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Miner */9
          };
  } else if ("difficulty" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Difficulty */10
          };
  } else if ("total_difficulty" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* TotalDifficulty */11
          };
  } else if ("extra_data" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ExtraData */12
          };
  } else if ("size" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Size */13
          };
  } else if ("gas_limit" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* GasLimit */14
          };
  } else if ("gas_used" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* GasUsed */15
          };
  } else if ("timestamp" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Timestamp */16
          };
  } else if ("uncles" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Uncles */17
          };
  } else if ("base_fee_per_gas" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* BaseFeePerGas */18
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function blockFieldSelection_encode(v) {
  return Spice.arrayToJson(blockFieldOptions_encode, v);
}

function blockFieldSelection_decode(v) {
  return Spice.arrayFromJson(blockFieldOptions_decode, v);
}

function transactionFieldOptions_encode(v) {
  switch (v) {
    case /* BlockHash */0 :
        return "block_hash";
    case /* BlockNumber */1 :
        return "block_number";
    case /* From */2 :
        return "from";
    case /* Gas */3 :
        return "gas";
    case /* GasPrice */4 :
        return "gas_price";
    case /* Hash */5 :
        return "hash";
    case /* Input */6 :
        return "input";
    case /* Nonce */7 :
        return "nonce";
    case /* To */8 :
        return "to";
    case /* TransactionIndex */9 :
        return "transaction_index";
    case /* Value */10 :
        return "value";
    case /* V */11 :
        return "v";
    case /* R */12 :
        return "r";
    case /* S */13 :
        return "s";
    case /* MaxPriorityFeePerGas */14 :
        return "max_priority_fee_per_gas";
    case /* MaxFeePerGas */15 :
        return "max_fee_per_gas";
    case /* ChainId */16 :
        return "chain_id";
    case /* CumulativeGasUsed */17 :
        return "cumulative_gas_used";
    case /* EffectiveGasPrice */18 :
        return "effective_gas_price";
    case /* GasUsed */19 :
        return "gas_used";
    case /* ContractAddress */20 :
        return "contract_address";
    case /* LogsBloom */21 :
        return "logs_bloom";
    case /* Type */22 :
        return "type";
    case /* Root */23 :
        return "root";
    case /* Status */24 :
        return "status";
    case /* Sighash */25 :
        return "sighash";
    
  }
}

function transactionFieldOptions_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("block_hash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* BlockHash */0
          };
  } else if ("block_number" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* BlockNumber */1
          };
  } else if ("from" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* From */2
          };
  } else if ("gas" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Gas */3
          };
  } else if ("gas_price" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* GasPrice */4
          };
  } else if ("hash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Hash */5
          };
  } else if ("input" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Input */6
          };
  } else if ("nonce" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Nonce */7
          };
  } else if ("to" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* To */8
          };
  } else if ("transaction_index" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* TransactionIndex */9
          };
  } else if ("value" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Value */10
          };
  } else if ("v" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* V */11
          };
  } else if ("r" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* R */12
          };
  } else if ("s" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* S */13
          };
  } else if ("max_priority_fee_per_gas" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* MaxPriorityFeePerGas */14
          };
  } else if ("max_fee_per_gas" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* MaxFeePerGas */15
          };
  } else if ("chain_id" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ChainId */16
          };
  } else if ("cumulative_gas_used" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CumulativeGasUsed */17
          };
  } else if ("effective_gas_price" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* EffectiveGasPrice */18
          };
  } else if ("gas_used" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* GasUsed */19
          };
  } else if ("contract_address" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ContractAddress */20
          };
  } else if ("logs_bloom" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* LogsBloom */21
          };
  } else if ("type" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Type */22
          };
  } else if ("root" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Root */23
          };
  } else if ("status" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Status */24
          };
  } else if ("sighash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Sighash */25
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function transactionFieldSelection_encode(v) {
  return Spice.arrayToJson(transactionFieldOptions_encode, v);
}

function transactionFieldSelection_decode(v) {
  return Spice.arrayFromJson(transactionFieldOptions_decode, v);
}

function logFieldOptions_encode(v) {
  switch (v) {
    case /* Removed */0 :
        return "removed";
    case /* LogIndex */1 :
        return "log_index";
    case /* TransactionIndex */2 :
        return "transaction_index";
    case /* TransactionHash */3 :
        return "transaction_hash";
    case /* BlockHash */4 :
        return "block_hash";
    case /* BlockNumber */5 :
        return "block_number";
    case /* Address */6 :
        return "address";
    case /* Data */7 :
        return "data";
    case /* Topic0 */8 :
        return "topic0";
    case /* Topic1 */9 :
        return "topic1";
    case /* Topic2 */10 :
        return "topic2";
    case /* Topic3 */11 :
        return "topic3";
    
  }
}

function logFieldOptions_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("removed" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Removed */0
          };
  } else if ("log_index" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* LogIndex */1
          };
  } else if ("transaction_index" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* TransactionIndex */2
          };
  } else if ("transaction_hash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* TransactionHash */3
          };
  } else if ("block_hash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* BlockHash */4
          };
  } else if ("block_number" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* BlockNumber */5
          };
  } else if ("address" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Address */6
          };
  } else if ("data" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Data */7
          };
  } else if ("topic0" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Topic0 */8
          };
  } else if ("topic1" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Topic1 */9
          };
  } else if ("topic2" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Topic2 */10
          };
  } else if ("topic3" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Topic3 */11
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function logFieldSelection_encode(v) {
  return Spice.arrayToJson(logFieldOptions_encode, v);
}

function logFieldSelection_decode(v) {
  return Spice.arrayFromJson(logFieldOptions_decode, v);
}

function fieldSelection_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "block",
                    true,
                    Spice.optionToJson(blockFieldSelection_encode, v.block)
                  ],
                  [
                    "transaction",
                    true,
                    Spice.optionToJson(transactionFieldSelection_encode, v.transaction)
                  ],
                  [
                    "log",
                    true,
                    Spice.optionToJson(logFieldSelection_encode, v.log)
                  ]
                ]));
}

function fieldSelection_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var block = Spice.optionFromJson(blockFieldSelection_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block"), null));
  if (block.TAG === /* Ok */0) {
    var transaction = Spice.optionFromJson(transactionFieldSelection_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction"), null));
    if (transaction.TAG === /* Ok */0) {
      var log = Spice.optionFromJson(logFieldSelection_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "log"), null));
      if (log.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  block: block._0,
                  transaction: transaction._0,
                  log: log._0
                }
              };
      }
      var e = log._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".log" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = transaction._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".transaction" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = block._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".block" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function logParams_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "address",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Ethers.ethAddress_encode, param);
                          }), v.address)
                  ],
                  [
                    "topics",
                    false,
                    Spice.arrayToJson((function (param) {
                            return Spice.arrayToJson(Ethers.EventFilter.topic_encode, param);
                          }), v.topics)
                  ]
                ]));
}

function logParams_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var address = Spice.optionFromJson((function (param) {
          return Spice.arrayFromJson(Ethers.ethAddress_decode, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
  if (address.TAG === /* Ok */0) {
    var topics = Spice.arrayFromJson((function (param) {
            return Spice.arrayFromJson(Ethers.EventFilter.topic_decode, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "topics"), null));
    if (topics.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                address: address._0,
                topics: topics._0
              }
            };
    }
    var e = topics._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".topics" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = address._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".address" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function transactionParams_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "from",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Ethers.ethAddress_encode, param);
                          }), v.from)
                  ],
                  [
                    "to",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Ethers.ethAddress_encode, param);
                          }), v.to_)
                  ],
                  [
                    "sighash",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(Spice.stringToJson, param);
                          }), v.sighash)
                  ]
                ]));
}

function transactionParams_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var from = Spice.optionFromJson((function (param) {
          return Spice.arrayFromJson(Ethers.ethAddress_decode, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "from"), null));
  if (from.TAG === /* Ok */0) {
    var to_ = Spice.optionFromJson((function (param) {
            return Spice.arrayFromJson(Ethers.ethAddress_decode, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "to"), null));
    if (to_.TAG === /* Ok */0) {
      var sighash = Spice.optionFromJson((function (param) {
              return Spice.arrayFromJson(Spice.stringFromJson, param);
            }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "sighash"), null));
      if (sighash.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  from: from._0,
                  to_: to_._0,
                  sighash: sighash._0
                }
              };
      }
      var e = sighash._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".sighash" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = to_._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("to" + e$1.path),
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = from._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".from" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function postQueryBody_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "from_block",
                    false,
                    Spice.intToJson(v.fromBlock)
                  ],
                  [
                    "to_block",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.toBlockExclusive)
                  ],
                  [
                    "logs",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(logParams_encode, param);
                          }), v.logs)
                  ],
                  [
                    "transactions",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(transactionParams_encode, param);
                          }), v.transactions)
                  ],
                  [
                    "field_selection",
                    false,
                    fieldSelection_encode(v.fieldSelection)
                  ],
                  [
                    "max_num_logs",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.maxNumLogs)
                  ]
                ]));
}

function postQueryBody_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var fromBlock = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "from_block"), null));
  if (fromBlock.TAG === /* Ok */0) {
    var toBlockExclusive = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "to_block"), null));
    if (toBlockExclusive.TAG === /* Ok */0) {
      var logs = Spice.optionFromJson((function (param) {
              return Spice.arrayFromJson(logParams_decode, param);
            }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "logs"), null));
      if (logs.TAG === /* Ok */0) {
        var transactions = Spice.optionFromJson((function (param) {
                return Spice.arrayFromJson(transactionParams_decode, param);
              }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactions"), null));
        if (transactions.TAG === /* Ok */0) {
          var fieldSelection = fieldSelection_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "field_selection"), null));
          if (fieldSelection.TAG === /* Ok */0) {
            var maxNumLogs = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "max_num_logs"), null));
            if (maxNumLogs.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        fromBlock: fromBlock._0,
                        toBlockExclusive: toBlockExclusive._0,
                        logs: logs._0,
                        transactions: transactions._0,
                        fieldSelection: fieldSelection._0,
                        maxNumLogs: maxNumLogs._0
                      }
                    };
            }
            var e = maxNumLogs._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: "." + ("max_num_logs" + e.path),
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = fieldSelection._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "." + ("field_selection" + e$1.path),
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = transactions._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".transactions" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = logs._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".logs" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = toBlockExclusive._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("to_block" + e$4.path),
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = fromBlock._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: "." + ("from_block" + e$5.path),
            message: e$5.message,
            value: e$5.value
          }
        };
}

var QueryTypes = {
  blockFieldOptions_encode: blockFieldOptions_encode,
  blockFieldOptions_decode: blockFieldOptions_decode,
  blockFieldSelection_encode: blockFieldSelection_encode,
  blockFieldSelection_decode: blockFieldSelection_decode,
  transactionFieldOptions_encode: transactionFieldOptions_encode,
  transactionFieldOptions_decode: transactionFieldOptions_decode,
  transactionFieldSelection_encode: transactionFieldSelection_encode,
  transactionFieldSelection_decode: transactionFieldSelection_decode,
  logFieldOptions_encode: logFieldOptions_encode,
  logFieldOptions_decode: logFieldOptions_decode,
  logFieldSelection_encode: logFieldSelection_encode,
  logFieldSelection_decode: logFieldSelection_decode,
  fieldSelection_encode: fieldSelection_encode,
  fieldSelection_decode: fieldSelection_decode,
  logParams_encode: logParams_encode,
  logParams_decode: logParams_decode,
  transactionParams_encode: transactionParams_encode,
  transactionParams_decode: transactionParams_decode,
  postQueryBody_encode: postQueryBody_encode,
  postQueryBody_decode: postQueryBody_decode
};

function blockData_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "number",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.number)
                  ],
                  [
                    "hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.hash)
                  ],
                  [
                    "parent_hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.parentHash)
                  ],
                  [
                    "nonce",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.nonce)
                  ],
                  [
                    "sha3_uncles",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.sha3Uncles)
                  ],
                  [
                    "logs_bloom",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.logsBloom)
                  ],
                  [
                    "transactions_root",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.transactionsRoot)
                  ],
                  [
                    "state_root",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.stateRoot)
                  ],
                  [
                    "receipts_root",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.receiptsRoot)
                  ],
                  [
                    "miner",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.miner)
                  ],
                  [
                    "difficulty",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.difficulty)
                  ],
                  [
                    "total_difficulty",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.totalDifficulty)
                  ],
                  [
                    "extra_data",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.extraData)
                  ],
                  [
                    "size",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.size)
                  ],
                  [
                    "gas_limit",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasLimit)
                  ],
                  [
                    "gas_used",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasUsed)
                  ],
                  [
                    "timestamp",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.timestamp)
                  ],
                  [
                    "unclus",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.uncles)
                  ],
                  [
                    "base_fee_per_gas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.baseFeePerGas)
                  ]
                ]));
}

function blockData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var number = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "number"), null));
  if (number.TAG === /* Ok */0) {
    var hash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "hash"), null));
    if (hash.TAG === /* Ok */0) {
      var parentHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "parent_hash"), null));
      if (parentHash.TAG === /* Ok */0) {
        var nonce = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "nonce"), null));
        if (nonce.TAG === /* Ok */0) {
          var sha3Uncles = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "sha3_uncles"), null));
          if (sha3Uncles.TAG === /* Ok */0) {
            var logsBloom = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "logs_bloom"), null));
            if (logsBloom.TAG === /* Ok */0) {
              var transactionsRoot = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactions_root"), null));
              if (transactionsRoot.TAG === /* Ok */0) {
                var stateRoot = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "state_root"), null));
                if (stateRoot.TAG === /* Ok */0) {
                  var receiptsRoot = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receipts_root"), null));
                  if (receiptsRoot.TAG === /* Ok */0) {
                    var miner = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "miner"), null));
                    if (miner.TAG === /* Ok */0) {
                      var difficulty = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "difficulty"), null));
                      if (difficulty.TAG === /* Ok */0) {
                        var totalDifficulty = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "total_difficulty"), null));
                        if (totalDifficulty.TAG === /* Ok */0) {
                          var extraData = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "extra_data"), null));
                          if (extraData.TAG === /* Ok */0) {
                            var size = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "size"), null));
                            if (size.TAG === /* Ok */0) {
                              var gasLimit = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas_limit"), null));
                              if (gasLimit.TAG === /* Ok */0) {
                                var gasUsed = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas_used"), null));
                                if (gasUsed.TAG === /* Ok */0) {
                                  var timestamp = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
                                  if (timestamp.TAG === /* Ok */0) {
                                    var uncles = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "unclus"), null));
                                    if (uncles.TAG === /* Ok */0) {
                                      var baseFeePerGas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "base_fee_per_gas"), null));
                                      if (baseFeePerGas.TAG === /* Ok */0) {
                                        return {
                                                TAG: /* Ok */0,
                                                _0: {
                                                  number: number._0,
                                                  hash: hash._0,
                                                  parentHash: parentHash._0,
                                                  nonce: nonce._0,
                                                  sha3Uncles: sha3Uncles._0,
                                                  logsBloom: logsBloom._0,
                                                  transactionsRoot: transactionsRoot._0,
                                                  stateRoot: stateRoot._0,
                                                  receiptsRoot: receiptsRoot._0,
                                                  miner: miner._0,
                                                  difficulty: difficulty._0,
                                                  totalDifficulty: totalDifficulty._0,
                                                  extraData: extraData._0,
                                                  size: size._0,
                                                  gasLimit: gasLimit._0,
                                                  gasUsed: gasUsed._0,
                                                  timestamp: timestamp._0,
                                                  uncles: uncles._0,
                                                  baseFeePerGas: baseFeePerGas._0
                                                }
                                              };
                                      }
                                      var e = baseFeePerGas._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: "." + ("base_fee_per_gas" + e.path),
                                                message: e.message,
                                                value: e.value
                                              }
                                            };
                                    }
                                    var e$1 = uncles._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: "." + ("unclus" + e$1.path),
                                              message: e$1.message,
                                              value: e$1.value
                                            }
                                          };
                                  }
                                  var e$2 = timestamp._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".timestamp" + e$2.path,
                                            message: e$2.message,
                                            value: e$2.value
                                          }
                                        };
                                }
                                var e$3 = gasUsed._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: "." + ("gas_used" + e$3.path),
                                          message: e$3.message,
                                          value: e$3.value
                                        }
                                      };
                              }
                              var e$4 = gasLimit._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: "." + ("gas_limit" + e$4.path),
                                        message: e$4.message,
                                        value: e$4.value
                                      }
                                    };
                            }
                            var e$5 = size._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".size" + e$5.path,
                                      message: e$5.message,
                                      value: e$5.value
                                    }
                                  };
                          }
                          var e$6 = extraData._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: "." + ("extra_data" + e$6.path),
                                    message: e$6.message,
                                    value: e$6.value
                                  }
                                };
                        }
                        var e$7 = totalDifficulty._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: "." + ("total_difficulty" + e$7.path),
                                  message: e$7.message,
                                  value: e$7.value
                                }
                              };
                      }
                      var e$8 = difficulty._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".difficulty" + e$8.path,
                                message: e$8.message,
                                value: e$8.value
                              }
                            };
                    }
                    var e$9 = miner._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".miner" + e$9.path,
                              message: e$9.message,
                              value: e$9.value
                            }
                          };
                  }
                  var e$10 = receiptsRoot._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: "." + ("receipts_root" + e$10.path),
                            message: e$10.message,
                            value: e$10.value
                          }
                        };
                }
                var e$11 = stateRoot._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: "." + ("state_root" + e$11.path),
                          message: e$11.message,
                          value: e$11.value
                        }
                      };
              }
              var e$12 = transactionsRoot._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: "." + ("transactions_root" + e$12.path),
                        message: e$12.message,
                        value: e$12.value
                      }
                    };
            }
            var e$13 = logsBloom._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: "." + ("logs_bloom" + e$13.path),
                      message: e$13.message,
                      value: e$13.value
                    }
                  };
          }
          var e$14 = sha3Uncles._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "." + ("sha3_uncles" + e$14.path),
                    message: e$14.message,
                    value: e$14.value
                  }
                };
        }
        var e$15 = nonce._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".nonce" + e$15.path,
                  message: e$15.message,
                  value: e$15.value
                }
              };
      }
      var e$16 = parentHash._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: "." + ("parent_hash" + e$16.path),
                message: e$16.message,
                value: e$16.value
              }
            };
    }
    var e$17 = hash._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".hash" + e$17.path,
              message: e$17.message,
              value: e$17.value
            }
          };
  }
  var e$18 = number._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".number" + e$18.path,
            message: e$18.message,
            value: e$18.value
          }
        };
}

function transactionData_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "block_hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.blockHash)
                  ],
                  [
                    "block_number",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.blockNumber)
                  ],
                  [
                    "from",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.from)
                  ],
                  [
                    "gas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gas)
                  ],
                  [
                    "gas_price",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasPrice)
                  ],
                  [
                    "hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.hash)
                  ],
                  [
                    "input",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.input)
                  ],
                  [
                    "nonce",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.nonce)
                  ],
                  [
                    "to",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.to)
                  ],
                  [
                    "transaction_index",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.transactionIndex)
                  ],
                  [
                    "value",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.value)
                  ],
                  [
                    "v",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.v)
                  ],
                  [
                    "r",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.r)
                  ],
                  [
                    "s",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.s)
                  ],
                  [
                    "max_priority_fee_per_gas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.maxPriorityFeePerGas)
                  ],
                  [
                    "max_fee_per_gas",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.maxFeePerGas)
                  ],
                  [
                    "chain_id",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.chainId)
                  ],
                  [
                    "cumulative_gas_used",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.cumulativeGasUsed)
                  ],
                  [
                    "effective_gas_price",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.effectiveGasPrice)
                  ],
                  [
                    "gas_used",
                    true,
                    Spice.optionToJson(Ethers.$$BigInt.t_encode, v.gasUsed)
                  ],
                  [
                    "contract_address",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.contractAddress)
                  ],
                  [
                    "logs_bloom",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.logsBoom)
                  ],
                  [
                    "type",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.type_)
                  ],
                  [
                    "root",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.root)
                  ],
                  [
                    "status",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.status)
                  ],
                  [
                    "sighash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.sighash)
                  ]
                ]));
}

function transactionData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var blockHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block_hash"), null));
  if (blockHash.TAG === /* Ok */0) {
    var blockNumber = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block_number"), null));
    if (blockNumber.TAG === /* Ok */0) {
      var from = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "from"), null));
      if (from.TAG === /* Ok */0) {
        var gas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas"), null));
        if (gas.TAG === /* Ok */0) {
          var gasPrice = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas_price"), null));
          if (gasPrice.TAG === /* Ok */0) {
            var hash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "hash"), null));
            if (hash.TAG === /* Ok */0) {
              var input = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "input"), null));
              if (input.TAG === /* Ok */0) {
                var nonce = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "nonce"), null));
                if (nonce.TAG === /* Ok */0) {
                  var to = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "to"), null));
                  if (to.TAG === /* Ok */0) {
                    var transactionIndex = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction_index"), null));
                    if (transactionIndex.TAG === /* Ok */0) {
                      var value = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "value"), null));
                      if (value.TAG === /* Ok */0) {
                        var v$1 = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "v"), null));
                        if (v$1.TAG === /* Ok */0) {
                          var r = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "r"), null));
                          if (r.TAG === /* Ok */0) {
                            var s = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "s"), null));
                            if (s.TAG === /* Ok */0) {
                              var maxPriorityFeePerGas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "max_priority_fee_per_gas"), null));
                              if (maxPriorityFeePerGas.TAG === /* Ok */0) {
                                var maxFeePerGas = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "max_fee_per_gas"), null));
                                if (maxFeePerGas.TAG === /* Ok */0) {
                                  var chainId = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "chain_id"), null));
                                  if (chainId.TAG === /* Ok */0) {
                                    var cumulativeGasUsed = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "cumulative_gas_used"), null));
                                    if (cumulativeGasUsed.TAG === /* Ok */0) {
                                      var effectiveGasPrice = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "effective_gas_price"), null));
                                      if (effectiveGasPrice.TAG === /* Ok */0) {
                                        var gasUsed = Spice.optionFromJson(Ethers.$$BigInt.t_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "gas_used"), null));
                                        if (gasUsed.TAG === /* Ok */0) {
                                          var contractAddress = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "contract_address"), null));
                                          if (contractAddress.TAG === /* Ok */0) {
                                            var logsBoom = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "logs_bloom"), null));
                                            if (logsBoom.TAG === /* Ok */0) {
                                              var type_ = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "type"), null));
                                              if (type_.TAG === /* Ok */0) {
                                                var root = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "root"), null));
                                                if (root.TAG === /* Ok */0) {
                                                  var status = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
                                                  if (status.TAG === /* Ok */0) {
                                                    var sighash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "sighash"), null));
                                                    if (sighash.TAG === /* Ok */0) {
                                                      return {
                                                              TAG: /* Ok */0,
                                                              _0: {
                                                                blockHash: blockHash._0,
                                                                blockNumber: blockNumber._0,
                                                                from: from._0,
                                                                gas: gas._0,
                                                                gasPrice: gasPrice._0,
                                                                hash: hash._0,
                                                                input: input._0,
                                                                nonce: nonce._0,
                                                                to: to._0,
                                                                transactionIndex: transactionIndex._0,
                                                                value: value._0,
                                                                v: v$1._0,
                                                                r: r._0,
                                                                s: s._0,
                                                                maxPriorityFeePerGas: maxPriorityFeePerGas._0,
                                                                maxFeePerGas: maxFeePerGas._0,
                                                                chainId: chainId._0,
                                                                cumulativeGasUsed: cumulativeGasUsed._0,
                                                                effectiveGasPrice: effectiveGasPrice._0,
                                                                gasUsed: gasUsed._0,
                                                                contractAddress: contractAddress._0,
                                                                logsBoom: logsBoom._0,
                                                                type_: type_._0,
                                                                root: root._0,
                                                                status: status._0,
                                                                sighash: sighash._0
                                                              }
                                                            };
                                                    }
                                                    var e = sighash._0;
                                                    return {
                                                            TAG: /* Error */1,
                                                            _0: {
                                                              path: "." + ("sighash" + e.path),
                                                              message: e.message,
                                                              value: e.value
                                                            }
                                                          };
                                                  }
                                                  var e$1 = status._0;
                                                  return {
                                                          TAG: /* Error */1,
                                                          _0: {
                                                            path: "." + ("status" + e$1.path),
                                                            message: e$1.message,
                                                            value: e$1.value
                                                          }
                                                        };
                                                }
                                                var e$2 = root._0;
                                                return {
                                                        TAG: /* Error */1,
                                                        _0: {
                                                          path: "." + ("root" + e$2.path),
                                                          message: e$2.message,
                                                          value: e$2.value
                                                        }
                                                      };
                                              }
                                              var e$3 = type_._0;
                                              return {
                                                      TAG: /* Error */1,
                                                      _0: {
                                                        path: "." + ("type" + e$3.path),
                                                        message: e$3.message,
                                                        value: e$3.value
                                                      }
                                                    };
                                            }
                                            var e$4 = logsBoom._0;
                                            return {
                                                    TAG: /* Error */1,
                                                    _0: {
                                                      path: "." + ("logs_bloom" + e$4.path),
                                                      message: e$4.message,
                                                      value: e$4.value
                                                    }
                                                  };
                                          }
                                          var e$5 = contractAddress._0;
                                          return {
                                                  TAG: /* Error */1,
                                                  _0: {
                                                    path: "." + ("contract_address" + e$5.path),
                                                    message: e$5.message,
                                                    value: e$5.value
                                                  }
                                                };
                                        }
                                        var e$6 = gasUsed._0;
                                        return {
                                                TAG: /* Error */1,
                                                _0: {
                                                  path: "." + ("gas_used" + e$6.path),
                                                  message: e$6.message,
                                                  value: e$6.value
                                                }
                                              };
                                      }
                                      var e$7 = effectiveGasPrice._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: "." + ("effective_gas_price" + e$7.path),
                                                message: e$7.message,
                                                value: e$7.value
                                              }
                                            };
                                    }
                                    var e$8 = cumulativeGasUsed._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: "." + ("cumulative_gas_used" + e$8.path),
                                              message: e$8.message,
                                              value: e$8.value
                                            }
                                          };
                                  }
                                  var e$9 = chainId._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: "." + ("chain_id" + e$9.path),
                                            message: e$9.message,
                                            value: e$9.value
                                          }
                                        };
                                }
                                var e$10 = maxFeePerGas._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: "." + ("max_fee_per_gas" + e$10.path),
                                          message: e$10.message,
                                          value: e$10.value
                                        }
                                      };
                              }
                              var e$11 = maxPriorityFeePerGas._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: "." + ("max_priority_fee_per_gas" + e$11.path),
                                        message: e$11.message,
                                        value: e$11.value
                                      }
                                    };
                            }
                            var e$12 = s._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".s" + e$12.path,
                                      message: e$12.message,
                                      value: e$12.value
                                    }
                                  };
                          }
                          var e$13 = r._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".r" + e$13.path,
                                    message: e$13.message,
                                    value: e$13.value
                                  }
                                };
                        }
                        var e$14 = v$1._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".v" + e$14.path,
                                  message: e$14.message,
                                  value: e$14.value
                                }
                              };
                      }
                      var e$15 = value._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".value" + e$15.path,
                                message: e$15.message,
                                value: e$15.value
                              }
                            };
                    }
                    var e$16 = transactionIndex._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: "." + ("transaction_index" + e$16.path),
                              message: e$16.message,
                              value: e$16.value
                            }
                          };
                  }
                  var e$17 = to._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".to" + e$17.path,
                            message: e$17.message,
                            value: e$17.value
                          }
                        };
                }
                var e$18 = nonce._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".nonce" + e$18.path,
                          message: e$18.message,
                          value: e$18.value
                        }
                      };
              }
              var e$19 = input._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".input" + e$19.path,
                        message: e$19.message,
                        value: e$19.value
                      }
                    };
            }
            var e$20 = hash._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".hash" + e$20.path,
                      message: e$20.message,
                      value: e$20.value
                    }
                  };
          }
          var e$21 = gasPrice._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "." + ("gas_price" + e$21.path),
                    message: e$21.message,
                    value: e$21.value
                  }
                };
        }
        var e$22 = gas._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".gas" + e$22.path,
                  message: e$22.message,
                  value: e$22.value
                }
              };
      }
      var e$23 = from._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".from" + e$23.path,
                message: e$23.message,
                value: e$23.value
              }
            };
    }
    var e$24 = blockNumber._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("block_number" + e$24.path),
              message: e$24.message,
              value: e$24.value
            }
          };
  }
  var e$25 = blockHash._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: "." + ("block_hash" + e$25.path),
            message: e$25.message,
            value: e$25.value
          }
        };
}

function logData_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "removed",
                    true,
                    Spice.optionToJson(Spice.boolToJson, v.removed)
                  ],
                  [
                    "log_index",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.index)
                  ],
                  [
                    "transaction_index",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.transactionIndex)
                  ],
                  [
                    "transaction_hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.transactionHash)
                  ],
                  [
                    "block_hash",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.blockHash)
                  ],
                  [
                    "block_number",
                    true,
                    Spice.optionToJson(Spice.intToJson, v.blockNumber)
                  ],
                  [
                    "address",
                    true,
                    Spice.optionToJson(unchecksummedEthAddress_encode, v.address)
                  ],
                  [
                    "data",
                    true,
                    Spice.optionToJson(Spice.stringToJson, v.data)
                  ],
                  [
                    "topic0",
                    true,
                    Spice.optionToJson(Ethers.EventFilter.topic_encode, v.topic0)
                  ],
                  [
                    "topic1",
                    true,
                    Spice.optionToJson(Ethers.EventFilter.topic_encode, v.topic1)
                  ],
                  [
                    "topic2",
                    true,
                    Spice.optionToJson(Ethers.EventFilter.topic_encode, v.topic2)
                  ],
                  [
                    "topic3",
                    true,
                    Spice.optionToJson(Ethers.EventFilter.topic_encode, v.topic3)
                  ]
                ]));
}

function logData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var removed = Spice.optionFromJson(Spice.boolFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "removed"), null));
  if (removed.TAG === /* Ok */0) {
    var index = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "log_index"), null));
    if (index.TAG === /* Ok */0) {
      var transactionIndex = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction_index"), null));
      if (transactionIndex.TAG === /* Ok */0) {
        var transactionHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction_hash"), null));
        if (transactionHash.TAG === /* Ok */0) {
          var blockHash = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block_hash"), null));
          if (blockHash.TAG === /* Ok */0) {
            var blockNumber = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "block_number"), null));
            if (blockNumber.TAG === /* Ok */0) {
              var address = Spice.optionFromJson(unchecksummedEthAddress_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
              if (address.TAG === /* Ok */0) {
                var data = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
                if (data.TAG === /* Ok */0) {
                  var topic0 = Spice.optionFromJson(Ethers.EventFilter.topic_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "topic0"), null));
                  if (topic0.TAG === /* Ok */0) {
                    var topic1 = Spice.optionFromJson(Ethers.EventFilter.topic_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "topic1"), null));
                    if (topic1.TAG === /* Ok */0) {
                      var topic2 = Spice.optionFromJson(Ethers.EventFilter.topic_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "topic2"), null));
                      if (topic2.TAG === /* Ok */0) {
                        var topic3 = Spice.optionFromJson(Ethers.EventFilter.topic_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "topic3"), null));
                        if (topic3.TAG === /* Ok */0) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: {
                                    removed: removed._0,
                                    index: index._0,
                                    transactionIndex: transactionIndex._0,
                                    transactionHash: transactionHash._0,
                                    blockHash: blockHash._0,
                                    blockNumber: blockNumber._0,
                                    address: address._0,
                                    data: data._0,
                                    topic0: topic0._0,
                                    topic1: topic1._0,
                                    topic2: topic2._0,
                                    topic3: topic3._0
                                  }
                                };
                        }
                        var e = topic3._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".topic3" + e.path,
                                  message: e.message,
                                  value: e.value
                                }
                              };
                      }
                      var e$1 = topic2._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".topic2" + e$1.path,
                                message: e$1.message,
                                value: e$1.value
                              }
                            };
                    }
                    var e$2 = topic1._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".topic1" + e$2.path,
                              message: e$2.message,
                              value: e$2.value
                            }
                          };
                  }
                  var e$3 = topic0._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".topic0" + e$3.path,
                            message: e$3.message,
                            value: e$3.value
                          }
                        };
                }
                var e$4 = data._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".data" + e$4.path,
                          message: e$4.message,
                          value: e$4.value
                        }
                      };
              }
              var e$5 = address._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".address" + e$5.path,
                        message: e$5.message,
                        value: e$5.value
                      }
                    };
            }
            var e$6 = blockNumber._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: "." + ("block_number" + e$6.path),
                      message: e$6.message,
                      value: e$6.value
                    }
                  };
          }
          var e$7 = blockHash._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "." + ("block_hash" + e$7.path),
                    message: e$7.message,
                    value: e$7.value
                  }
                };
        }
        var e$8 = transactionHash._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: "." + ("transaction_hash" + e$8.path),
                  message: e$8.message,
                  value: e$8.value
                }
              };
      }
      var e$9 = transactionIndex._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: "." + ("transaction_index" + e$9.path),
                message: e$9.message,
                value: e$9.value
              }
            };
    }
    var e$10 = index._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("log_index" + e$10.path),
              message: e$10.message,
              value: e$10.value
            }
          };
  }
  var e$11 = removed._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".removed" + e$11.path,
            message: e$11.message,
            value: e$11.value
          }
        };
}

function data_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "blocks",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(blockData_encode, param);
                          }), v.blocks)
                  ],
                  [
                    "transactions",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(transactionData_encode, param);
                          }), v.transactions)
                  ],
                  [
                    "logs",
                    true,
                    Spice.optionToJson((function (param) {
                            return Spice.arrayToJson(logData_encode, param);
                          }), v.logs)
                  ]
                ]));
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var blocks = Spice.optionFromJson((function (param) {
          return Spice.arrayFromJson(blockData_decode, param);
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "blocks"), null));
  if (blocks.TAG === /* Ok */0) {
    var transactions = Spice.optionFromJson((function (param) {
            return Spice.arrayFromJson(transactionData_decode, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "transactions"), null));
    if (transactions.TAG === /* Ok */0) {
      var logs = Spice.optionFromJson((function (param) {
              return Spice.arrayFromJson(logData_decode, param);
            }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "logs"), null));
      if (logs.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  blocks: blocks._0,
                  transactions: transactions._0,
                  logs: logs._0
                }
              };
      }
      var e = logs._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".logs" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = transactions._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".transactions" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = blocks._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".blocks" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function queryResponse_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "data",
                    false,
                    Spice.arrayToJson(data_encode, v.data)
                  ],
                  [
                    "archive_height",
                    false,
                    Spice.intToJson(v.archiveHeight)
                  ],
                  [
                    "next_block",
                    false,
                    Spice.intToJson(v.nextBlock)
                  ],
                  [
                    "total_execution_time",
                    false,
                    Spice.intToJson(v.totalTime)
                  ]
                ]));
}

function queryResponse_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(data_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var archiveHeight = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "archive_height"), null));
    if (archiveHeight.TAG === /* Ok */0) {
      var nextBlock = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "next_block"), null));
      if (nextBlock.TAG === /* Ok */0) {
        var totalTime = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total_execution_time"), null));
        if (totalTime.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    archiveHeight: archiveHeight._0,
                    nextBlock: nextBlock._0,
                    totalTime: totalTime._0
                  }
                };
        }
        var e = totalTime._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: "." + ("total_execution_time" + e.path),
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = nextBlock._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: "." + ("next_block" + e$1.path),
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = archiveHeight._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("archive_height" + e$2.path),
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function heightResponse_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([[
                    "height",
                    false,
                    Spice.intToJson(v.height)
                  ]]));
}

function heightResponse_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var height = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "height"), null));
  if (height.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              height: height._0
            }
          };
  }
  var e = height._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".height" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

var ResponseTypes = {
  blockData_encode: blockData_encode,
  blockData_decode: blockData_decode,
  transactionData_encode: transactionData_encode,
  transactionData_decode: transactionData_decode,
  logData_encode: logData_encode,
  logData_decode: logData_decode,
  data_encode: data_encode,
  data_decode: data_decode,
  queryResponse_encode: queryResponse_encode,
  queryResponse_decode: queryResponse_decode,
  heightResponse_encode: heightResponse_encode,
  heightResponse_decode: heightResponse_decode
};

function executeSkarQuery(serverUrl, postQueryBody) {
  return QueryHelpers.executeFetchRequest(serverUrl + "/query", "POST", [
              postQueryBody,
              postQueryBody_encode
            ], queryResponse_decode, undefined);
}

var getArchiveHeight = EthArchive.getArchiveHeight;

exports.unchecksummedEthAddress_encode = unchecksummedEthAddress_encode;
exports.unchecksummedEthAddress_decode = unchecksummedEthAddress_decode;
exports.QueryTypes = QueryTypes;
exports.ResponseTypes = ResponseTypes;
exports.executeSkarQuery = executeSkarQuery;
exports.getArchiveHeight = getArchiveHeight;
/* Ethers Not a pure module */
