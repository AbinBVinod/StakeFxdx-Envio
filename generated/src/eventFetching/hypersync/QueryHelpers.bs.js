// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var FailedToFetch = /* @__PURE__ */Caml_exceptions.create("QueryHelpers.FailedToFetch");

var FailedToParseJson = /* @__PURE__ */Caml_exceptions.create("QueryHelpers.FailedToParseJson");

async function executeFetchRequest(endpoint, method, bodyAndEncoder, responseDecoder, param) {
  try {
    var body = Belt_Option.map(bodyAndEncoder, (function (param) {
            return JSON.stringify(Curry._1(param[1], param[0]));
          }));
    var res = await $$Promise.$$catch(fetch(endpoint, {
              method: method,
              body: body,
              headers: Caml_option.some(new Headers({
                        "Content-type": "application/json"
                      }))
            }), (function (e) {
            return Promise.reject({
                        RE_EXN_ID: FailedToFetch,
                        _1: e
                      });
          }));
    var data = await $$Promise.$$catch(res.json(), (function (e) {
            return Promise.reject({
                        RE_EXN_ID: FailedToParseJson,
                        _1: e
                      });
          }));
    var e = Curry._1(responseDecoder, data);
    if (e.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: e._0
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: {
                TAG: /* Deserialize */0,
                _0: e._0
              }
            };
    }
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === FailedToFetch) {
      return {
              TAG: /* Error */1,
              _0: {
                TAG: /* FailedToFetch */1,
                _0: exn._1
              }
            };
    } else if (exn.RE_EXN_ID === FailedToParseJson) {
      return {
              TAG: /* Error */1,
              _0: {
                TAG: /* FailedToParseJson */2,
                _0: exn._1
              }
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: {
                TAG: /* Other */3,
                _0: exn
              }
            };
    }
  }
}

exports.FailedToFetch = FailedToFetch;
exports.FailedToParseJson = FailedToParseJson;
exports.executeFetchRequest = executeFetchRequest;
/* No side effect */
