// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pino = require("./bindings/Pino.bs.js");
var Pino$1 = require("pino");
var Config = require("./Config.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var EcsPinoFormat = require("@elastic/ecs-pino-format");

var logLevels = Js_dict.fromArray([
      [
        "udebug",
        32
      ],
      [
        "uinfo",
        34
      ],
      [
        "uwarn",
        36
      ],
      [
        "uerror",
        38
      ],
      [
        "trace",
        10
      ],
      [
        "debug",
        20
      ],
      [
        "info",
        30
      ],
      [
        "warn",
        40
      ],
      [
        "error",
        50
      ],
      [
        "fatal",
        60
      ]
    ]);

var pinoPretty_target = "pino-pretty";

var pinoPretty_options = Caml_option.some(Pino.Transport.makeTransportOptions({
          customLevels: logLevels,
          customColors: "fatal:bgRed,error:red,warn:yellow,info:green,udebug:bgBlue,uinfo:bgGreen,uwarn:bgYellow,uerror:bgRed,debug:blue,trace:gray"
        }));

var pinoPretty_level = Config.userLogLevel;

var pinoPretty = {
  target: pinoPretty_target,
  options: pinoPretty_options,
  level: pinoPretty_level
};

var pinoFile_target = "pino/file";

var pinoFile_options = Caml_option.some(Pino.Transport.makeTransportOptions({
          destination: Config.logFilePath,
          append: true,
          mkdir: true
        }));

var pinoFile_level = Config.defaultFileLogLevel;

var pinoFile = {
  target: pinoFile_target,
  options: pinoFile_options,
  level: pinoFile_level
};

var logger;

switch (Config.logStrategy) {
  case /* EcsFile */0 :
      var newrecord = Caml_obj.obj_dup(EcsPinoFormat(undefined));
      logger = Pino$1((newrecord.customLevels = Caml_option.some(logLevels), newrecord), Pino$1.transport(pinoFile));
      break;
  case /* EcsConsole */1 :
      var newrecord$1 = Caml_obj.obj_dup(EcsPinoFormat(undefined));
      logger = Pino$1((newrecord$1.customLevels = Caml_option.some(logLevels), newrecord$1.level = Config.userLogLevel, newrecord$1));
      break;
  case /* FileOnly */2 :
      logger = Pino$1({
            level: Config.defaultFileLogLevel,
            customLevels: Caml_option.some(logLevels)
          }, Pino$1.transport(pinoFile));
      break;
  case /* ConsoleRaw */3 :
      logger = Pino$1({
            level: Config.userLogLevel,
            customLevels: Caml_option.some(logLevels)
          });
      break;
  case /* ConsolePretty */4 :
      logger = Pino$1({
            level: Config.userLogLevel,
            customLevels: Caml_option.some(logLevels)
          }, Pino$1.transport(pinoPretty));
      break;
  case /* Both */5 :
      logger = Pino$1({
            level: "trace",
            customLevels: Caml_option.some(logLevels)
          }, Pino$1.transport({
                targets: [
                  pinoPretty,
                  pinoFile
                ]
              }));
      break;
  
}

function setLogLevel(level) {
  logger.level = level;
}

function trace(message) {
  logger.trace(Pino.createPinoMessage(message));
}

function debug(message) {
  logger.debug(Pino.createPinoMessage(message));
}

function info(message) {
  logger.info(Pino.createPinoMessage(message));
}

function warn(message) {
  logger.warn(Pino.createPinoMessage(message));
}

function error(message) {
  logger.error(Pino.createPinoMessage(message));
}

function errorWithExn(error, message) {
  logger.error(error, Pino.createPinoMessage(message));
}

function fatal(message) {
  logger.fatal(Pino.createPinoMessage(message));
}

function childTrace(logger, params) {
  logger.trace(Pino.createPinoMessage(params));
}

function childDebug(logger, params) {
  logger.debug(Pino.createPinoMessage(params));
}

function childInfo(logger, params) {
  logger.info(Pino.createPinoMessage(params));
}

function childWarn(logger, params) {
  logger.warn(Pino.createPinoMessage(params));
}

function childError(logger, params) {
  logger.error(Pino.createPinoMessage(params));
}

function childErrorWithExn(logger, error, params) {
  logger.error(error, Pino.createPinoMessage(params));
}

function childFatal(logger, params) {
  logger.fatal(Pino.createPinoMessage(params));
}

function createChild(params) {
  return logger.child(Pino.createChildParams(params));
}

function createChildFrom(logger, params) {
  return logger.child(Pino.createChildParams(params));
}

exports.logLevels = logLevels;
exports.pinoPretty = pinoPretty;
exports.pinoFile = pinoFile;
exports.logger = logger;
exports.setLogLevel = setLogLevel;
exports.trace = trace;
exports.debug = debug;
exports.info = info;
exports.warn = warn;
exports.error = error;
exports.errorWithExn = errorWithExn;
exports.fatal = fatal;
exports.childTrace = childTrace;
exports.childDebug = childDebug;
exports.childInfo = childInfo;
exports.childWarn = childWarn;
exports.childError = childError;
exports.childErrorWithExn = childErrorWithExn;
exports.childFatal = childFatal;
exports.createChild = createChild;
exports.createChildFrom = createChildFrom;
/* logLevels Not a pure module */
