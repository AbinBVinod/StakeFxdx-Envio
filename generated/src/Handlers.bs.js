// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Logging = require("./Logging.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function mapFunctionRegisterName(functionRegister) {
  if (functionRegister) {
    return "Handler";
  } else {
    return "Loader";
  }
}

var hasPrintedWarning = new Set();

function getDefaultLoaderHandler(functionRegister, eventName, param, param$1) {
  var functionName = functionRegister ? "Handler" : "Loader";
  var repeatKey = "" + eventName + "-" + functionName + "";
  if (!hasPrintedWarning.has(repeatKey)) {
    Logging.warn("Ignored " + eventName + " event, as there is no " + functionName + " registered. You need to implement a " + eventName + "" + functionName + " method in your handler file. This will apply to all future " + eventName + " events.");
    hasPrintedWarning.add(repeatKey);
    return ;
  }
  
}

var addRewardLoader = {
  contents: undefined
};

var addRewardHandler = {
  contents: undefined
};

function loader(userLoader) {
  addRewardLoader.contents = userLoader;
}

function handler(userHandler) {
  addRewardHandler.contents = userHandler;
}

function getLoader(param) {
  return Belt_Option.getWithDefault(addRewardLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "AddReward", param, param$1);
              }));
}

function getHandler(param) {
  return Belt_Option.getWithDefault(addRewardHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "AddReward", param, param$1);
              }));
}

var AddReward = {
  loader: loader,
  handler: handler,
  getLoader: getLoader,
  getHandler: getHandler
};

var sendRewardLoader = {
  contents: undefined
};

var sendRewardHandler = {
  contents: undefined
};

function loader$1(userLoader) {
  sendRewardLoader.contents = userLoader;
}

function handler$1(userHandler) {
  sendRewardHandler.contents = userHandler;
}

function getLoader$1(param) {
  return Belt_Option.getWithDefault(sendRewardLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "SendReward", param, param$1);
              }));
}

function getHandler$1(param) {
  return Belt_Option.getWithDefault(sendRewardHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "SendReward", param, param$1);
              }));
}

var SendReward = {
  loader: loader$1,
  handler: handler$1,
  getLoader: getLoader$1,
  getHandler: getHandler$1
};

var totalReservesLoader = {
  contents: undefined
};

var totalReservesHandler = {
  contents: undefined
};

function loader$2(userLoader) {
  totalReservesLoader.contents = userLoader;
}

function handler$2(userHandler) {
  totalReservesHandler.contents = userHandler;
}

function getLoader$2(param) {
  return Belt_Option.getWithDefault(totalReservesLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "TotalReserves", param, param$1);
              }));
}

function getHandler$2(param) {
  return Belt_Option.getWithDefault(totalReservesHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "TotalReserves", param, param$1);
              }));
}

var TotalReserves = {
  loader: loader$2,
  handler: handler$2,
  getLoader: getLoader$2,
  getHandler: getHandler$2
};

var RewardFxdxVaultContract = {
  AddReward: AddReward,
  SendReward: SendReward,
  TotalReserves: TotalReserves
};

var stakeLoader = {
  contents: undefined
};

var stakeHandler = {
  contents: undefined
};

function loader$3(userLoader) {
  stakeLoader.contents = userLoader;
}

function handler$3(userHandler) {
  stakeHandler.contents = userHandler;
}

function getLoader$3(param) {
  return Belt_Option.getWithDefault(stakeLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "Stake", param, param$1);
              }));
}

function getHandler$3(param) {
  return Belt_Option.getWithDefault(stakeHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "Stake", param, param$1);
              }));
}

var Stake = {
  loader: loader$3,
  handler: handler$3,
  getLoader: getLoader$3,
  getHandler: getHandler$3
};

var totalReservesLoader$1 = {
  contents: undefined
};

var totalReservesHandler$1 = {
  contents: undefined
};

function loader$4(userLoader) {
  totalReservesLoader$1.contents = userLoader;
}

function handler$4(userHandler) {
  totalReservesHandler$1.contents = userHandler;
}

function getLoader$4(param) {
  return Belt_Option.getWithDefault(totalReservesLoader$1.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "TotalReserves", param, param$1);
              }));
}

function getHandler$4(param) {
  return Belt_Option.getWithDefault(totalReservesHandler$1.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "TotalReserves", param, param$1);
              }));
}

var TotalReserves$1 = {
  loader: loader$4,
  handler: handler$4,
  getLoader: getLoader$4,
  getHandler: getHandler$4
};

var unstakeLoader = {
  contents: undefined
};

var unstakeHandler = {
  contents: undefined
};

function loader$5(userLoader) {
  unstakeLoader.contents = userLoader;
}

function handler$5(userHandler) {
  unstakeHandler.contents = userHandler;
}

function getLoader$5(param) {
  return Belt_Option.getWithDefault(unstakeLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "Unstake", param, param$1);
              }));
}

function getHandler$5(param) {
  return Belt_Option.getWithDefault(unstakeHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "Unstake", param, param$1);
              }));
}

var Unstake = {
  loader: loader$5,
  handler: handler$5,
  getLoader: getLoader$5,
  getHandler: getHandler$5
};

var StakedFxdxVaultContract = {
  Stake: Stake,
  TotalReserves: TotalReserves$1,
  Unstake: Unstake
};

exports.mapFunctionRegisterName = mapFunctionRegisterName;
exports.hasPrintedWarning = hasPrintedWarning;
exports.getDefaultLoaderHandler = getDefaultLoaderHandler;
exports.RewardFxdxVaultContract = RewardFxdxVaultContract;
exports.StakedFxdxVaultContract = StakedFxdxVaultContract;
/* hasPrintedWarning Not a pure module */
