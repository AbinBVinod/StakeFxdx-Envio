// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.bs.js");
var Ethers = require("./bindings/Ethers.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var id_encode = Spice.stringToJson;

var id_decode = Spice.stringFromJson;

function nullable_encode(encoder, n) {
  if (n !== undefined) {
    return Curry._1(encoder, Caml_option.valFromOption(n));
  } else {
    return null;
  }
}

function eventsSummaryEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "rewardFxdxVault_AddRewardCount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardFxdxVault_AddRewardCount)
                  ],
                  [
                    "rewardFxdxVault_SendRewardCount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardFxdxVault_SendRewardCount)
                  ],
                  [
                    "rewardFxdxVault_TotalReservesCount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardFxdxVault_TotalReservesCount)
                  ],
                  [
                    "stakedFxdxVault_StakeCount",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakedFxdxVault_StakeCount)
                  ],
                  [
                    "stakedFxdxVault_TotalReservesCount",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakedFxdxVault_TotalReservesCount)
                  ],
                  [
                    "stakedFxdxVault_UnstakeCount",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakedFxdxVault_UnstakeCount)
                  ]
                ]));
}

function eventsSummaryEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var rewardFxdxVault_AddRewardCount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardFxdxVault_AddRewardCount"), null));
    if (rewardFxdxVault_AddRewardCount.TAG === /* Ok */0) {
      var rewardFxdxVault_SendRewardCount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardFxdxVault_SendRewardCount"), null));
      if (rewardFxdxVault_SendRewardCount.TAG === /* Ok */0) {
        var rewardFxdxVault_TotalReservesCount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardFxdxVault_TotalReservesCount"), null));
        if (rewardFxdxVault_TotalReservesCount.TAG === /* Ok */0) {
          var stakedFxdxVault_StakeCount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakedFxdxVault_StakeCount"), null));
          if (stakedFxdxVault_StakeCount.TAG === /* Ok */0) {
            var stakedFxdxVault_TotalReservesCount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakedFxdxVault_TotalReservesCount"), null));
            if (stakedFxdxVault_TotalReservesCount.TAG === /* Ok */0) {
              var stakedFxdxVault_UnstakeCount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakedFxdxVault_UnstakeCount"), null));
              if (stakedFxdxVault_UnstakeCount.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          id: id._0,
                          rewardFxdxVault_AddRewardCount: rewardFxdxVault_AddRewardCount._0,
                          rewardFxdxVault_SendRewardCount: rewardFxdxVault_SendRewardCount._0,
                          rewardFxdxVault_TotalReservesCount: rewardFxdxVault_TotalReservesCount._0,
                          stakedFxdxVault_StakeCount: stakedFxdxVault_StakeCount._0,
                          stakedFxdxVault_TotalReservesCount: stakedFxdxVault_TotalReservesCount._0,
                          stakedFxdxVault_UnstakeCount: stakedFxdxVault_UnstakeCount._0
                        }
                      };
              }
              var e = stakedFxdxVault_UnstakeCount._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".stakedFxdxVault_UnstakeCount" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = stakedFxdxVault_TotalReservesCount._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".stakedFxdxVault_TotalReservesCount" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = stakedFxdxVault_StakeCount._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".stakedFxdxVault_StakeCount" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = rewardFxdxVault_TotalReservesCount._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".rewardFxdxVault_TotalReservesCount" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = rewardFxdxVault_SendRewardCount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".rewardFxdxVault_SendRewardCount" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = rewardFxdxVault_AddRewardCount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".rewardFxdxVault_AddRewardCount" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

function rewardFxdxVault_AddRewardEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "rewardId",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardId)
                  ],
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "rewardAmount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardAmount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Spice.stringToJson(v.account)
                  ],
                  [
                    "isClaimed",
                    false,
                    Spice.boolToJson(v.isClaimed)
                  ],
                  [
                    "eventsSummary",
                    false,
                    Spice.stringToJson(v.eventsSummary)
                  ]
                ]));
}

function rewardFxdxVault_AddRewardEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var rewardId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardId"), null));
    if (rewardId.TAG === /* Ok */0) {
      var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
      if (stakeId.TAG === /* Ok */0) {
        var rewardAmount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardAmount"), null));
        if (rewardAmount.TAG === /* Ok */0) {
          var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
          if (duration.TAG === /* Ok */0) {
            var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
            if (timestamp.TAG === /* Ok */0) {
              var account = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
              if (account.TAG === /* Ok */0) {
                var isClaimed = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "isClaimed"), null));
                if (isClaimed.TAG === /* Ok */0) {
                  var eventsSummary = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "eventsSummary"), null));
                  if (eventsSummary.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              id: id._0,
                              rewardId: rewardId._0,
                              stakeId: stakeId._0,
                              rewardAmount: rewardAmount._0,
                              duration: duration._0,
                              timestamp: timestamp._0,
                              account: account._0,
                              isClaimed: isClaimed._0,
                              eventsSummary: eventsSummary._0
                            }
                          };
                  }
                  var e = eventsSummary._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".eventsSummary" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = isClaimed._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".isClaimed" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = account._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".account" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = timestamp._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".timestamp" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = duration._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".duration" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = rewardAmount._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".rewardAmount" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = stakeId._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".stakeId" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = rewardId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".rewardId" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function rewardFxdxVault_SendRewardEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "rewardId",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardId)
                  ],
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "rewardAmount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardAmount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Spice.stringToJson(v.account)
                  ],
                  [
                    "isClaimed",
                    false,
                    Spice.boolToJson(v.isClaimed)
                  ],
                  [
                    "eventsSummary",
                    false,
                    Spice.stringToJson(v.eventsSummary)
                  ]
                ]));
}

function rewardFxdxVault_SendRewardEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var rewardId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardId"), null));
    if (rewardId.TAG === /* Ok */0) {
      var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
      if (stakeId.TAG === /* Ok */0) {
        var rewardAmount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardAmount"), null));
        if (rewardAmount.TAG === /* Ok */0) {
          var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
          if (duration.TAG === /* Ok */0) {
            var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
            if (timestamp.TAG === /* Ok */0) {
              var account = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
              if (account.TAG === /* Ok */0) {
                var isClaimed = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "isClaimed"), null));
                if (isClaimed.TAG === /* Ok */0) {
                  var eventsSummary = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "eventsSummary"), null));
                  if (eventsSummary.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              id: id._0,
                              rewardId: rewardId._0,
                              stakeId: stakeId._0,
                              rewardAmount: rewardAmount._0,
                              duration: duration._0,
                              timestamp: timestamp._0,
                              account: account._0,
                              isClaimed: isClaimed._0,
                              eventsSummary: eventsSummary._0
                            }
                          };
                  }
                  var e = eventsSummary._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".eventsSummary" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = isClaimed._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".isClaimed" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = account._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".account" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = timestamp._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".timestamp" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = duration._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".duration" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = rewardAmount._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".rewardAmount" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = stakeId._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".stakeId" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = rewardId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".rewardId" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function rewardFxdxVault_TotalReservesEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "vault",
                    false,
                    Spice.stringToJson(v.vault)
                  ],
                  [
                    "rewardReserves",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardReserves)
                  ],
                  [
                    "eventsSummary",
                    false,
                    Spice.stringToJson(v.eventsSummary)
                  ]
                ]));
}

function rewardFxdxVault_TotalReservesEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var vault = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "vault"), null));
    if (vault.TAG === /* Ok */0) {
      var rewardReserves = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardReserves"), null));
      if (rewardReserves.TAG === /* Ok */0) {
        var eventsSummary = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "eventsSummary"), null));
        if (eventsSummary.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    id: id._0,
                    vault: vault._0,
                    rewardReserves: rewardReserves._0,
                    eventsSummary: eventsSummary._0
                  }
                };
        }
        var e = eventsSummary._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".eventsSummary" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = rewardReserves._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".rewardReserves" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = vault._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".vault" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function stakedFxdxVault_StakeEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "amount",
                    false,
                    Ethers.$$BigInt.t_encode(v.amount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "rewardInterestRate",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardInterestRate)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Spice.stringToJson(v.account)
                  ],
                  [
                    "unstaked",
                    false,
                    Spice.boolToJson(v.unstaked)
                  ],
                  [
                    "eventsSummary",
                    false,
                    Spice.stringToJson(v.eventsSummary)
                  ]
                ]));
}

function stakedFxdxVault_StakeEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
    if (stakeId.TAG === /* Ok */0) {
      var amount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
      if (amount.TAG === /* Ok */0) {
        var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
        if (duration.TAG === /* Ok */0) {
          var rewardInterestRate = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardInterestRate"), null));
          if (rewardInterestRate.TAG === /* Ok */0) {
            var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
            if (timestamp.TAG === /* Ok */0) {
              var account = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
              if (account.TAG === /* Ok */0) {
                var unstaked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "unstaked"), null));
                if (unstaked.TAG === /* Ok */0) {
                  var eventsSummary = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "eventsSummary"), null));
                  if (eventsSummary.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              id: id._0,
                              stakeId: stakeId._0,
                              amount: amount._0,
                              duration: duration._0,
                              rewardInterestRate: rewardInterestRate._0,
                              timestamp: timestamp._0,
                              account: account._0,
                              unstaked: unstaked._0,
                              eventsSummary: eventsSummary._0
                            }
                          };
                  }
                  var e = eventsSummary._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".eventsSummary" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = unstaked._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".unstaked" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = account._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".account" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = timestamp._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".timestamp" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = rewardInterestRate._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".rewardInterestRate" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = duration._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".duration" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = amount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".amount" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = stakeId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".stakeId" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function stakedFxdxVault_TotalReservesEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "vault",
                    false,
                    Spice.stringToJson(v.vault)
                  ],
                  [
                    "reserves",
                    false,
                    Ethers.$$BigInt.t_encode(v.reserves)
                  ],
                  [
                    "eventsSummary",
                    false,
                    Spice.stringToJson(v.eventsSummary)
                  ]
                ]));
}

function stakedFxdxVault_TotalReservesEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var vault = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "vault"), null));
    if (vault.TAG === /* Ok */0) {
      var reserves = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "reserves"), null));
      if (reserves.TAG === /* Ok */0) {
        var eventsSummary = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "eventsSummary"), null));
        if (eventsSummary.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    id: id._0,
                    vault: vault._0,
                    reserves: reserves._0,
                    eventsSummary: eventsSummary._0
                  }
                };
        }
        var e = eventsSummary._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".eventsSummary" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = reserves._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".reserves" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = vault._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".vault" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function stakedFxdxVault_UnstakeEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "amount",
                    false,
                    Ethers.$$BigInt.t_encode(v.amount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "rewardInterestRate",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardInterestRate)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Spice.stringToJson(v.account)
                  ],
                  [
                    "unstaked",
                    false,
                    Spice.boolToJson(v.unstaked)
                  ],
                  [
                    "eventsSummary",
                    false,
                    Spice.stringToJson(v.eventsSummary)
                  ]
                ]));
}

function stakedFxdxVault_UnstakeEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
    if (stakeId.TAG === /* Ok */0) {
      var amount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
      if (amount.TAG === /* Ok */0) {
        var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
        if (duration.TAG === /* Ok */0) {
          var rewardInterestRate = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardInterestRate"), null));
          if (rewardInterestRate.TAG === /* Ok */0) {
            var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
            if (timestamp.TAG === /* Ok */0) {
              var account = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
              if (account.TAG === /* Ok */0) {
                var unstaked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "unstaked"), null));
                if (unstaked.TAG === /* Ok */0) {
                  var eventsSummary = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "eventsSummary"), null));
                  if (eventsSummary.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              id: id._0,
                              stakeId: stakeId._0,
                              amount: amount._0,
                              duration: duration._0,
                              rewardInterestRate: rewardInterestRate._0,
                              timestamp: timestamp._0,
                              account: account._0,
                              unstaked: unstaked._0,
                              eventsSummary: eventsSummary._0
                            }
                          };
                  }
                  var e = eventsSummary._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".eventsSummary" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = unstaked._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".unstaked" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = account._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".account" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = timestamp._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".timestamp" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = rewardInterestRate._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".rewardInterestRate" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = duration._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".duration" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = amount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".amount" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = stakeId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".stakeId" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function eventArgs_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "rewardId",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardId)
                  ],
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "rewardAmount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardAmount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Ethers.ethAddress_encode(v.account)
                  ],
                  [
                    "isClaimed",
                    false,
                    Spice.boolToJson(v.isClaimed)
                  ]
                ]));
}

function eventArgs_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var rewardId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardId"), null));
  if (rewardId.TAG === /* Ok */0) {
    var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
    if (stakeId.TAG === /* Ok */0) {
      var rewardAmount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardAmount"), null));
      if (rewardAmount.TAG === /* Ok */0) {
        var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
        if (duration.TAG === /* Ok */0) {
          var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
          if (timestamp.TAG === /* Ok */0) {
            var account = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
            if (account.TAG === /* Ok */0) {
              var isClaimed = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "isClaimed"), null));
              if (isClaimed.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          rewardId: rewardId._0,
                          stakeId: stakeId._0,
                          rewardAmount: rewardAmount._0,
                          duration: duration._0,
                          timestamp: timestamp._0,
                          account: account._0,
                          isClaimed: isClaimed._0
                        }
                      };
              }
              var e = isClaimed._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".isClaimed" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = account._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".account" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = timestamp._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".timestamp" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = duration._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".duration" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = rewardAmount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".rewardAmount" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = stakeId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".stakeId" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = rewardId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".rewardId" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

var AddRewardEvent = {
  eventArgs_encode: eventArgs_encode,
  eventArgs_decode: eventArgs_decode
};

function eventArgs_encode$1(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "rewardId",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardId)
                  ],
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "rewardAmount",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardAmount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Ethers.ethAddress_encode(v.account)
                  ],
                  [
                    "isClaimed",
                    false,
                    Spice.boolToJson(v.isClaimed)
                  ]
                ]));
}

function eventArgs_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var rewardId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardId"), null));
  if (rewardId.TAG === /* Ok */0) {
    var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
    if (stakeId.TAG === /* Ok */0) {
      var rewardAmount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardAmount"), null));
      if (rewardAmount.TAG === /* Ok */0) {
        var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
        if (duration.TAG === /* Ok */0) {
          var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
          if (timestamp.TAG === /* Ok */0) {
            var account = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
            if (account.TAG === /* Ok */0) {
              var isClaimed = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "isClaimed"), null));
              if (isClaimed.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          rewardId: rewardId._0,
                          stakeId: stakeId._0,
                          rewardAmount: rewardAmount._0,
                          duration: duration._0,
                          timestamp: timestamp._0,
                          account: account._0,
                          isClaimed: isClaimed._0
                        }
                      };
              }
              var e = isClaimed._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".isClaimed" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = account._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".account" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = timestamp._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".timestamp" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = duration._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".duration" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = rewardAmount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".rewardAmount" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = stakeId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".stakeId" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = rewardId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".rewardId" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

var SendRewardEvent = {
  eventArgs_encode: eventArgs_encode$1,
  eventArgs_decode: eventArgs_decode$1
};

function eventArgs_encode$2(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "vault",
                    false,
                    Ethers.ethAddress_encode(v.vault)
                  ],
                  [
                    "rewardReserves",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardReserves)
                  ]
                ]));
}

function eventArgs_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var vault = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "vault"), null));
  if (vault.TAG === /* Ok */0) {
    var rewardReserves = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardReserves"), null));
    if (rewardReserves.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                vault: vault._0,
                rewardReserves: rewardReserves._0
              }
            };
    }
    var e = rewardReserves._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".rewardReserves" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = vault._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".vault" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var TotalReservesEvent = {
  eventArgs_encode: eventArgs_encode$2,
  eventArgs_decode: eventArgs_decode$2
};

var RewardFxdxVaultContract = {
  AddRewardEvent: AddRewardEvent,
  SendRewardEvent: SendRewardEvent,
  TotalReservesEvent: TotalReservesEvent
};

function eventArgs_encode$3(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "amount",
                    false,
                    Ethers.$$BigInt.t_encode(v.amount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "rewardInterestRate",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardInterestRate)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Ethers.ethAddress_encode(v.account)
                  ],
                  [
                    "unstaked",
                    false,
                    Spice.boolToJson(v.unstaked)
                  ]
                ]));
}

function eventArgs_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
  if (stakeId.TAG === /* Ok */0) {
    var amount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
    if (amount.TAG === /* Ok */0) {
      var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
      if (duration.TAG === /* Ok */0) {
        var rewardInterestRate = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardInterestRate"), null));
        if (rewardInterestRate.TAG === /* Ok */0) {
          var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
          if (timestamp.TAG === /* Ok */0) {
            var account = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
            if (account.TAG === /* Ok */0) {
              var unstaked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "unstaked"), null));
              if (unstaked.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          stakeId: stakeId._0,
                          amount: amount._0,
                          duration: duration._0,
                          rewardInterestRate: rewardInterestRate._0,
                          timestamp: timestamp._0,
                          account: account._0,
                          unstaked: unstaked._0
                        }
                      };
              }
              var e = unstaked._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".unstaked" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = account._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".account" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = timestamp._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".timestamp" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = rewardInterestRate._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".rewardInterestRate" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = duration._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".duration" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = amount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".amount" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = stakeId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".stakeId" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

var StakeEvent = {
  eventArgs_encode: eventArgs_encode$3,
  eventArgs_decode: eventArgs_decode$3
};

function eventArgs_encode$4(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "vault",
                    false,
                    Ethers.ethAddress_encode(v.vault)
                  ],
                  [
                    "reserves",
                    false,
                    Ethers.$$BigInt.t_encode(v.reserves)
                  ]
                ]));
}

function eventArgs_decode$4(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var vault = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "vault"), null));
  if (vault.TAG === /* Ok */0) {
    var reserves = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "reserves"), null));
    if (reserves.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                vault: vault._0,
                reserves: reserves._0
              }
            };
    }
    var e = reserves._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".reserves" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = vault._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".vault" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var TotalReservesEvent$1 = {
  eventArgs_encode: eventArgs_encode$4,
  eventArgs_decode: eventArgs_decode$4
};

function eventArgs_encode$5(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "stakeId",
                    false,
                    Ethers.$$BigInt.t_encode(v.stakeId)
                  ],
                  [
                    "amount",
                    false,
                    Ethers.$$BigInt.t_encode(v.amount)
                  ],
                  [
                    "duration",
                    false,
                    Ethers.$$BigInt.t_encode(v.duration)
                  ],
                  [
                    "rewardInterestRate",
                    false,
                    Ethers.$$BigInt.t_encode(v.rewardInterestRate)
                  ],
                  [
                    "timestamp",
                    false,
                    Ethers.$$BigInt.t_encode(v.timestamp)
                  ],
                  [
                    "account",
                    false,
                    Ethers.ethAddress_encode(v.account)
                  ],
                  [
                    "unstaked",
                    false,
                    Spice.boolToJson(v.unstaked)
                  ]
                ]));
}

function eventArgs_decode$5(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var stakeId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stakeId"), null));
  if (stakeId.TAG === /* Ok */0) {
    var amount = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
    if (amount.TAG === /* Ok */0) {
      var duration = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "duration"), null));
      if (duration.TAG === /* Ok */0) {
        var rewardInterestRate = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rewardInterestRate"), null));
        if (rewardInterestRate.TAG === /* Ok */0) {
          var timestamp = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "timestamp"), null));
          if (timestamp.TAG === /* Ok */0) {
            var account = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "account"), null));
            if (account.TAG === /* Ok */0) {
              var unstaked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "unstaked"), null));
              if (unstaked.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          stakeId: stakeId._0,
                          amount: amount._0,
                          duration: duration._0,
                          rewardInterestRate: rewardInterestRate._0,
                          timestamp: timestamp._0,
                          account: account._0,
                          unstaked: unstaked._0
                        }
                      };
              }
              var e = unstaked._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".unstaked" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = account._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".account" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = timestamp._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".timestamp" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = rewardInterestRate._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".rewardInterestRate" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = duration._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".duration" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = amount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".amount" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = stakeId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".stakeId" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

var UnstakeEvent = {
  eventArgs_encode: eventArgs_encode$5,
  eventArgs_decode: eventArgs_decode$5
};

var StakedFxdxVaultContract = {
  StakeEvent: StakeEvent,
  TotalReservesEvent: TotalReservesEvent$1,
  UnstakeEvent: UnstakeEvent
};

function rewardFxdxVaultContract_AddReward(param_0) {
  return {
          TAG: /* RewardFxdxVaultContract_AddReward */0,
          _0: param_0
        };
}

function rewardFxdxVaultContract_SendReward(param_0) {
  return {
          TAG: /* RewardFxdxVaultContract_SendReward */1,
          _0: param_0
        };
}

function rewardFxdxVaultContract_TotalReserves(param_0) {
  return {
          TAG: /* RewardFxdxVaultContract_TotalReserves */2,
          _0: param_0
        };
}

function stakedFxdxVaultContract_Stake(param_0) {
  return {
          TAG: /* StakedFxdxVaultContract_Stake */3,
          _0: param_0
        };
}

function stakedFxdxVaultContract_TotalReserves(param_0) {
  return {
          TAG: /* StakedFxdxVaultContract_TotalReserves */4,
          _0: param_0
        };
}

function stakedFxdxVaultContract_Unstake(param_0) {
  return {
          TAG: /* StakedFxdxVaultContract_Unstake */5,
          _0: param_0
        };
}

function rewardFxdxVaultContract_AddRewardWithContext(param_0, param_1) {
  return {
          TAG: /* RewardFxdxVaultContract_AddRewardWithContext */0,
          _0: param_0,
          _1: param_1
        };
}

function rewardFxdxVaultContract_SendRewardWithContext(param_0, param_1) {
  return {
          TAG: /* RewardFxdxVaultContract_SendRewardWithContext */1,
          _0: param_0,
          _1: param_1
        };
}

function rewardFxdxVaultContract_TotalReservesWithContext(param_0, param_1) {
  return {
          TAG: /* RewardFxdxVaultContract_TotalReservesWithContext */2,
          _0: param_0,
          _1: param_1
        };
}

function stakedFxdxVaultContract_StakeWithContext(param_0, param_1) {
  return {
          TAG: /* StakedFxdxVaultContract_StakeWithContext */3,
          _0: param_0,
          _1: param_1
        };
}

function stakedFxdxVaultContract_TotalReservesWithContext(param_0, param_1) {
  return {
          TAG: /* StakedFxdxVaultContract_TotalReservesWithContext */4,
          _0: param_0,
          _1: param_1
        };
}

function stakedFxdxVaultContract_UnstakeWithContext(param_0, param_1) {
  return {
          TAG: /* StakedFxdxVaultContract_UnstakeWithContext */5,
          _0: param_0,
          _1: param_1
        };
}

function eventName_encode(v) {
  switch (v) {
    case /* RewardFxdxVault_AddReward */0 :
        return "RewardFxdxVault_AddReward";
    case /* RewardFxdxVault_SendReward */1 :
        return "RewardFxdxVault_SendReward";
    case /* RewardFxdxVault_TotalReserves */2 :
        return "RewardFxdxVault_TotalReserves";
    case /* StakedFxdxVault_Stake */3 :
        return "StakedFxdxVault_Stake";
    case /* StakedFxdxVault_TotalReserves */4 :
        return "StakedFxdxVault_TotalReserves";
    case /* StakedFxdxVault_Unstake */5 :
        return "StakedFxdxVault_Unstake";
    
  }
}

function eventName_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("RewardFxdxVault_AddReward" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RewardFxdxVault_AddReward */0
          };
  } else if ("RewardFxdxVault_SendReward" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RewardFxdxVault_SendReward */1
          };
  } else if ("RewardFxdxVault_TotalReserves" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RewardFxdxVault_TotalReserves */2
          };
  } else if ("StakedFxdxVault_Stake" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* StakedFxdxVault_Stake */3
          };
  } else if ("StakedFxdxVault_TotalReserves" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* StakedFxdxVault_TotalReserves */4
          };
  } else if ("StakedFxdxVault_Unstake" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* StakedFxdxVault_Unstake */5
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function eventNameToString(eventName) {
  switch (eventName) {
    case /* RewardFxdxVault_AddReward */0 :
        return "AddReward";
    case /* RewardFxdxVault_SendReward */1 :
        return "SendReward";
    case /* StakedFxdxVault_Stake */3 :
        return "Stake";
    case /* RewardFxdxVault_TotalReserves */2 :
    case /* StakedFxdxVault_TotalReserves */4 :
        return "TotalReserves";
    case /* StakedFxdxVault_Unstake */5 :
        return "Unstake";
    
  }
}

var nullable_decode = Spice.optionFromJson;

exports.id_encode = id_encode;
exports.id_decode = id_decode;
exports.nullable_encode = nullable_encode;
exports.nullable_decode = nullable_decode;
exports.eventsSummaryEntity_encode = eventsSummaryEntity_encode;
exports.eventsSummaryEntity_decode = eventsSummaryEntity_decode;
exports.rewardFxdxVault_AddRewardEntity_encode = rewardFxdxVault_AddRewardEntity_encode;
exports.rewardFxdxVault_AddRewardEntity_decode = rewardFxdxVault_AddRewardEntity_decode;
exports.rewardFxdxVault_SendRewardEntity_encode = rewardFxdxVault_SendRewardEntity_encode;
exports.rewardFxdxVault_SendRewardEntity_decode = rewardFxdxVault_SendRewardEntity_decode;
exports.rewardFxdxVault_TotalReservesEntity_encode = rewardFxdxVault_TotalReservesEntity_encode;
exports.rewardFxdxVault_TotalReservesEntity_decode = rewardFxdxVault_TotalReservesEntity_decode;
exports.stakedFxdxVault_StakeEntity_encode = stakedFxdxVault_StakeEntity_encode;
exports.stakedFxdxVault_StakeEntity_decode = stakedFxdxVault_StakeEntity_decode;
exports.stakedFxdxVault_TotalReservesEntity_encode = stakedFxdxVault_TotalReservesEntity_encode;
exports.stakedFxdxVault_TotalReservesEntity_decode = stakedFxdxVault_TotalReservesEntity_decode;
exports.stakedFxdxVault_UnstakeEntity_encode = stakedFxdxVault_UnstakeEntity_encode;
exports.stakedFxdxVault_UnstakeEntity_decode = stakedFxdxVault_UnstakeEntity_decode;
exports.RewardFxdxVaultContract = RewardFxdxVaultContract;
exports.StakedFxdxVaultContract = StakedFxdxVaultContract;
exports.rewardFxdxVaultContract_AddReward = rewardFxdxVaultContract_AddReward;
exports.rewardFxdxVaultContract_SendReward = rewardFxdxVaultContract_SendReward;
exports.rewardFxdxVaultContract_TotalReserves = rewardFxdxVaultContract_TotalReserves;
exports.stakedFxdxVaultContract_Stake = stakedFxdxVaultContract_Stake;
exports.stakedFxdxVaultContract_TotalReserves = stakedFxdxVaultContract_TotalReserves;
exports.stakedFxdxVaultContract_Unstake = stakedFxdxVaultContract_Unstake;
exports.rewardFxdxVaultContract_AddRewardWithContext = rewardFxdxVaultContract_AddRewardWithContext;
exports.rewardFxdxVaultContract_SendRewardWithContext = rewardFxdxVaultContract_SendRewardWithContext;
exports.rewardFxdxVaultContract_TotalReservesWithContext = rewardFxdxVaultContract_TotalReservesWithContext;
exports.stakedFxdxVaultContract_StakeWithContext = stakedFxdxVaultContract_StakeWithContext;
exports.stakedFxdxVaultContract_TotalReservesWithContext = stakedFxdxVaultContract_TotalReservesWithContext;
exports.stakedFxdxVaultContract_UnstakeWithContext = stakedFxdxVaultContract_UnstakeWithContext;
exports.eventName_encode = eventName_encode;
exports.eventName_decode = eventName_decode;
exports.eventNameToString = eventNameToString;
/* Ethers Not a pure module */
