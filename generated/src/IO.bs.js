// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Types = require("./Types.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var EventUtils = require("./EventUtils.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var DbFunctions = require("./DbFunctions.bs.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

function entityCurrentCrud(currentCrud, nextCrud) {
  if (currentCrud !== undefined) {
    switch (currentCrud) {
      case /* Read */0 :
          if (nextCrud === 0) {
            return /* Read */0;
          }
          break;
      case /* Set */1 :
          if (nextCrud === 0) {
            return /* Set */1;
          }
          break;
      case /* Delete */2 :
          if (nextCrud === 0) {
            return /* Delete */2;
          }
          break;
      
    }
  }
  switch (nextCrud) {
    case /* Read */0 :
        return nextCrud;
    case /* Set */1 :
        return /* Set */1;
    case /* Delete */2 :
        return /* Delete */2;
    
  }
}

function MakeStore(StoreItem) {
  var make = function (param) {
    return {
            dict: {},
            hasher: StoreItem.hasher
          };
  };
  var set = function (self, key, dbOp, entity) {
    self.dict[Curry._1(self.hasher, key)] = {
      dbOp: dbOp,
      entity: entity
    };
  };
  var get = function (self, key) {
    return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                  return row.entity;
                }));
  };
  var values = function (self) {
    return Js_dict.values(self.dict);
  };
  var clone = function (self) {
    return {
            dict: structuredClone(self.dict),
            hasher: self.hasher
          };
  };
  return {
          make: make,
          set: set,
          get: get,
          values: values,
          clone: clone
        };
}

function hasher(prim) {
  return String(prim);
}

function make(param) {
  return {
          dict: {},
          hasher: hasher
        };
}

function set(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values(self) {
  return Js_dict.values(self.dict);
}

function clone(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var EventSyncState = {
  make: make,
  set: set,
  get: get,
  values: values,
  clone: clone
};

function hasher$1(key) {
  return EventUtils.getEventIdKeyString(key.chainId, key.eventId);
}

function make$1(param) {
  return {
          dict: {},
          hasher: hasher$1
        };
}

function set$1(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$1(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$1(self) {
  return Js_dict.values(self.dict);
}

function clone$1(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var RawEvents = {
  make: make$1,
  set: set$1,
  get: get$1,
  values: values$1,
  clone: clone$1
};

function hasher$2(param) {
  return EventUtils.getContractAddressKeyString(param.chainId, param.contractAddress);
}

function make$2(param) {
  return {
          dict: {},
          hasher: hasher$2
        };
}

function set$2(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$2(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$2(self) {
  return Js_dict.values(self.dict);
}

function clone$2(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var DynamicContractRegistry = {
  make: make$2,
  set: set$2,
  get: get$2,
  values: values$2,
  clone: clone$2
};

function hasher$3(prim) {
  return prim;
}

function make$3(param) {
  return {
          dict: {},
          hasher: hasher$3
        };
}

function set$3(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$3(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$3(self) {
  return Js_dict.values(self.dict);
}

function clone$3(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var EventsSummary = {
  make: make$3,
  set: set$3,
  get: get$3,
  values: values$3,
  clone: clone$3
};

function hasher$4(prim) {
  return prim;
}

function make$4(param) {
  return {
          dict: {},
          hasher: hasher$4
        };
}

function set$4(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$4(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$4(self) {
  return Js_dict.values(self.dict);
}

function clone$4(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var RewardFxdxVault_AddReward = {
  make: make$4,
  set: set$4,
  get: get$4,
  values: values$4,
  clone: clone$4
};

function hasher$5(prim) {
  return prim;
}

function make$5(param) {
  return {
          dict: {},
          hasher: hasher$5
        };
}

function set$5(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$5(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$5(self) {
  return Js_dict.values(self.dict);
}

function clone$5(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var RewardFxdxVault_SendReward = {
  make: make$5,
  set: set$5,
  get: get$5,
  values: values$5,
  clone: clone$5
};

function hasher$6(prim) {
  return prim;
}

function make$6(param) {
  return {
          dict: {},
          hasher: hasher$6
        };
}

function set$6(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$6(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$6(self) {
  return Js_dict.values(self.dict);
}

function clone$6(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var RewardFxdxVault_TotalReserves = {
  make: make$6,
  set: set$6,
  get: get$6,
  values: values$6,
  clone: clone$6
};

function hasher$7(prim) {
  return prim;
}

function make$7(param) {
  return {
          dict: {},
          hasher: hasher$7
        };
}

function set$7(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$7(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$7(self) {
  return Js_dict.values(self.dict);
}

function clone$7(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var StakedFxdxVault_Stake = {
  make: make$7,
  set: set$7,
  get: get$7,
  values: values$7,
  clone: clone$7
};

function hasher$8(prim) {
  return prim;
}

function make$8(param) {
  return {
          dict: {},
          hasher: hasher$8
        };
}

function set$8(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$8(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$8(self) {
  return Js_dict.values(self.dict);
}

function clone$8(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var StakedFxdxVault_TotalReserves = {
  make: make$8,
  set: set$8,
  get: get$8,
  values: values$8,
  clone: clone$8
};

function hasher$9(prim) {
  return prim;
}

function make$9(param) {
  return {
          dict: {},
          hasher: hasher$9
        };
}

function set$9(self, key, dbOp, entity) {
  self.dict[Curry._1(self.hasher, key)] = {
    dbOp: dbOp,
    entity: entity
  };
}

function get$9(self, key) {
  return Belt_Option.map(Js_dict.get(self.dict, Curry._1(self.hasher, key)), (function (row) {
                return row.entity;
              }));
}

function values$9(self) {
  return Js_dict.values(self.dict);
}

function clone$9(self) {
  return {
          dict: structuredClone(self.dict),
          hasher: self.hasher
        };
}

var StakedFxdxVault_Unstake = {
  make: make$9,
  set: set$9,
  get: get$9,
  values: values$9,
  clone: clone$9
};

function make$10(param) {
  return {
          eventSyncState: {
            dict: {},
            hasher: hasher
          },
          rawEvents: {
            dict: {},
            hasher: hasher$1
          },
          dynamicContractRegistry: {
            dict: {},
            hasher: hasher$2
          },
          eventsSummary: {
            dict: {},
            hasher: hasher$3
          },
          rewardFxdxVault_AddReward: {
            dict: {},
            hasher: hasher$4
          },
          rewardFxdxVault_SendReward: {
            dict: {},
            hasher: hasher$5
          },
          rewardFxdxVault_TotalReserves: {
            dict: {},
            hasher: hasher$6
          },
          stakedFxdxVault_Stake: {
            dict: {},
            hasher: hasher$7
          },
          stakedFxdxVault_TotalReserves: {
            dict: {},
            hasher: hasher$8
          },
          stakedFxdxVault_Unstake: {
            dict: {},
            hasher: hasher$9
          }
        };
}

function clone$10(self) {
  return {
          eventSyncState: clone(self.eventSyncState),
          rawEvents: clone$1(self.rawEvents),
          dynamicContractRegistry: clone$2(self.dynamicContractRegistry),
          eventsSummary: clone$3(self.eventsSummary),
          rewardFxdxVault_AddReward: clone$4(self.rewardFxdxVault_AddReward),
          rewardFxdxVault_SendReward: clone$5(self.rewardFxdxVault_SendReward),
          rewardFxdxVault_TotalReserves: clone$6(self.rewardFxdxVault_TotalReserves),
          stakedFxdxVault_Stake: clone$7(self.stakedFxdxVault_Stake),
          stakedFxdxVault_TotalReserves: clone$8(self.stakedFxdxVault_TotalReserves),
          stakedFxdxVault_Unstake: clone$9(self.stakedFxdxVault_Unstake)
        };
}

var InMemoryStore = {
  entityCurrentCrud: entityCurrentCrud,
  MakeStore: MakeStore,
  EventSyncState: EventSyncState,
  RawEvents: RawEvents,
  DynamicContractRegistry: DynamicContractRegistry,
  EventsSummary: EventsSummary,
  RewardFxdxVault_AddReward: RewardFxdxVault_AddReward,
  RewardFxdxVault_SendReward: RewardFxdxVault_SendReward,
  RewardFxdxVault_TotalReserves: RewardFxdxVault_TotalReserves,
  StakedFxdxVault_Stake: StakedFxdxVault_Stake,
  StakedFxdxVault_TotalReserves: StakedFxdxVault_TotalReserves,
  StakedFxdxVault_Unstake: StakedFxdxVault_Unstake,
  make: make$10,
  clone: clone$10
};

function emptyLoadLayer(param) {
  return {
          dataLoadedActionsGetters: [],
          eventsSummaryIdsToLoad: undefined,
          rewardFxdxVault_AddRewardIdsToLoad: undefined,
          rewardFxdxVault_SendRewardIdsToLoad: undefined,
          rewardFxdxVault_TotalReservesIdsToLoad: undefined,
          stakedFxdxVault_StakeIdsToLoad: undefined,
          stakedFxdxVault_TotalReservesIdsToLoad: undefined,
          stakedFxdxVault_UnstakeIdsToLoad: undefined
        };
}

var extendIdsToLoad = Belt_SetString.add;

var extendDataLoadedActionsGetters = Belt_Array.concat;

var LoadLayer = {
  emptyLoadLayer: emptyLoadLayer,
  extendIdsToLoad: extendIdsToLoad,
  extendDataLoadedActionsGetters: extendDataLoadedActionsGetters
};

function eventsSummaryLinkedEntityLoader(loadLayer, entityId, inMemoryStore, eventsSummaryLoaderConfig) {
  if (eventsSummaryLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: Belt_SetString.add(loadLayer.eventsSummaryIdsToLoad, entityId),
            rewardFxdxVault_AddRewardIdsToLoad: loadLayer.rewardFxdxVault_AddRewardIdsToLoad,
            rewardFxdxVault_SendRewardIdsToLoad: loadLayer.rewardFxdxVault_SendRewardIdsToLoad,
            rewardFxdxVault_TotalReservesIdsToLoad: loadLayer.rewardFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_StakeIdsToLoad: loadLayer.stakedFxdxVault_StakeIdsToLoad,
            stakedFxdxVault_TotalReservesIdsToLoad: loadLayer.stakedFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_UnstakeIdsToLoad: loadLayer.stakedFxdxVault_UnstakeIdsToLoad
          };
  } else {
    return loadLayer;
  }
}

function rewardFxdxVault_AddRewardLinkedEntityLoader(loadLayer, entityId, inMemoryStore, rewardFxdxVault_AddRewardLoaderConfig) {
  if (rewardFxdxVault_AddRewardLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: loadLayer.eventsSummaryIdsToLoad,
            rewardFxdxVault_AddRewardIdsToLoad: Belt_SetString.add(loadLayer.rewardFxdxVault_AddRewardIdsToLoad, entityId),
            rewardFxdxVault_SendRewardIdsToLoad: loadLayer.rewardFxdxVault_SendRewardIdsToLoad,
            rewardFxdxVault_TotalReservesIdsToLoad: loadLayer.rewardFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_StakeIdsToLoad: loadLayer.stakedFxdxVault_StakeIdsToLoad,
            stakedFxdxVault_TotalReservesIdsToLoad: loadLayer.stakedFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_UnstakeIdsToLoad: loadLayer.stakedFxdxVault_UnstakeIdsToLoad
          };
  } else {
    return loadLayer;
  }
}

function rewardFxdxVault_SendRewardLinkedEntityLoader(loadLayer, entityId, inMemoryStore, rewardFxdxVault_SendRewardLoaderConfig) {
  if (rewardFxdxVault_SendRewardLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: loadLayer.eventsSummaryIdsToLoad,
            rewardFxdxVault_AddRewardIdsToLoad: loadLayer.rewardFxdxVault_AddRewardIdsToLoad,
            rewardFxdxVault_SendRewardIdsToLoad: Belt_SetString.add(loadLayer.rewardFxdxVault_SendRewardIdsToLoad, entityId),
            rewardFxdxVault_TotalReservesIdsToLoad: loadLayer.rewardFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_StakeIdsToLoad: loadLayer.stakedFxdxVault_StakeIdsToLoad,
            stakedFxdxVault_TotalReservesIdsToLoad: loadLayer.stakedFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_UnstakeIdsToLoad: loadLayer.stakedFxdxVault_UnstakeIdsToLoad
          };
  } else {
    return loadLayer;
  }
}

function rewardFxdxVault_TotalReservesLinkedEntityLoader(loadLayer, entityId, inMemoryStore, rewardFxdxVault_TotalReservesLoaderConfig) {
  if (rewardFxdxVault_TotalReservesLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: loadLayer.eventsSummaryIdsToLoad,
            rewardFxdxVault_AddRewardIdsToLoad: loadLayer.rewardFxdxVault_AddRewardIdsToLoad,
            rewardFxdxVault_SendRewardIdsToLoad: loadLayer.rewardFxdxVault_SendRewardIdsToLoad,
            rewardFxdxVault_TotalReservesIdsToLoad: Belt_SetString.add(loadLayer.rewardFxdxVault_TotalReservesIdsToLoad, entityId),
            stakedFxdxVault_StakeIdsToLoad: loadLayer.stakedFxdxVault_StakeIdsToLoad,
            stakedFxdxVault_TotalReservesIdsToLoad: loadLayer.stakedFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_UnstakeIdsToLoad: loadLayer.stakedFxdxVault_UnstakeIdsToLoad
          };
  } else {
    return loadLayer;
  }
}

function stakedFxdxVault_StakeLinkedEntityLoader(loadLayer, entityId, inMemoryStore, stakedFxdxVault_StakeLoaderConfig) {
  if (stakedFxdxVault_StakeLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: loadLayer.eventsSummaryIdsToLoad,
            rewardFxdxVault_AddRewardIdsToLoad: loadLayer.rewardFxdxVault_AddRewardIdsToLoad,
            rewardFxdxVault_SendRewardIdsToLoad: loadLayer.rewardFxdxVault_SendRewardIdsToLoad,
            rewardFxdxVault_TotalReservesIdsToLoad: loadLayer.rewardFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_StakeIdsToLoad: Belt_SetString.add(loadLayer.stakedFxdxVault_StakeIdsToLoad, entityId),
            stakedFxdxVault_TotalReservesIdsToLoad: loadLayer.stakedFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_UnstakeIdsToLoad: loadLayer.stakedFxdxVault_UnstakeIdsToLoad
          };
  } else {
    return loadLayer;
  }
}

function stakedFxdxVault_TotalReservesLinkedEntityLoader(loadLayer, entityId, inMemoryStore, stakedFxdxVault_TotalReservesLoaderConfig) {
  if (stakedFxdxVault_TotalReservesLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: loadLayer.eventsSummaryIdsToLoad,
            rewardFxdxVault_AddRewardIdsToLoad: loadLayer.rewardFxdxVault_AddRewardIdsToLoad,
            rewardFxdxVault_SendRewardIdsToLoad: loadLayer.rewardFxdxVault_SendRewardIdsToLoad,
            rewardFxdxVault_TotalReservesIdsToLoad: loadLayer.rewardFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_StakeIdsToLoad: loadLayer.stakedFxdxVault_StakeIdsToLoad,
            stakedFxdxVault_TotalReservesIdsToLoad: Belt_SetString.add(loadLayer.stakedFxdxVault_TotalReservesIdsToLoad, entityId),
            stakedFxdxVault_UnstakeIdsToLoad: loadLayer.stakedFxdxVault_UnstakeIdsToLoad
          };
  } else {
    return loadLayer;
  }
}

function stakedFxdxVault_UnstakeLinkedEntityLoader(loadLayer, entityId, inMemoryStore, stakedFxdxVault_UnstakeLoaderConfig) {
  if (stakedFxdxVault_UnstakeLoaderConfig) {
    return {
            dataLoadedActionsGetters: loadLayer.dataLoadedActionsGetters,
            eventsSummaryIdsToLoad: loadLayer.eventsSummaryIdsToLoad,
            rewardFxdxVault_AddRewardIdsToLoad: loadLayer.rewardFxdxVault_AddRewardIdsToLoad,
            rewardFxdxVault_SendRewardIdsToLoad: loadLayer.rewardFxdxVault_SendRewardIdsToLoad,
            rewardFxdxVault_TotalReservesIdsToLoad: loadLayer.rewardFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_StakeIdsToLoad: loadLayer.stakedFxdxVault_StakeIdsToLoad,
            stakedFxdxVault_TotalReservesIdsToLoad: loadLayer.stakedFxdxVault_TotalReservesIdsToLoad,
            stakedFxdxVault_UnstakeIdsToLoad: Belt_SetString.add(loadLayer.stakedFxdxVault_UnstakeIdsToLoad, entityId)
          };
  } else {
    return loadLayer;
  }
}

function getLoadLayer(entityBatch, inMemoryStore) {
  return Belt_Array.reduce(entityBatch, {
              dataLoadedActionsGetters: [],
              eventsSummaryIdsToLoad: undefined,
              rewardFxdxVault_AddRewardIdsToLoad: undefined,
              rewardFxdxVault_SendRewardIdsToLoad: undefined,
              rewardFxdxVault_TotalReservesIdsToLoad: undefined,
              stakedFxdxVault_StakeIdsToLoad: undefined,
              stakedFxdxVault_TotalReservesIdsToLoad: undefined,
              stakedFxdxVault_UnstakeIdsToLoad: undefined
            }, (function (loadLayer, readEntity) {
                switch (readEntity.TAG | 0) {
                  case /* EventsSummaryRead */0 :
                      return eventsSummaryLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  case /* RewardFxdxVault_AddRewardRead */1 :
                      return rewardFxdxVault_AddRewardLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  case /* RewardFxdxVault_SendRewardRead */2 :
                      return rewardFxdxVault_SendRewardLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  case /* RewardFxdxVault_TotalReservesRead */3 :
                      return rewardFxdxVault_TotalReservesLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  case /* StakedFxdxVault_StakeRead */4 :
                      return stakedFxdxVault_StakeLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  case /* StakedFxdxVault_TotalReservesRead */5 :
                      return stakedFxdxVault_TotalReservesLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  case /* StakedFxdxVault_UnstakeRead */6 :
                      return stakedFxdxVault_UnstakeLinkedEntityLoader(loadLayer, readEntity._0, inMemoryStore, true);
                  
                }
              }));
}

function getNextLayer(loadLayer) {
  var dataLoadedActionsGetters = loadLayer.dataLoadedActionsGetters;
  if (dataLoadedActionsGetters.length !== 0) {
    return /* NextLayer */{
            _0: Belt_Array.reduce(dataLoadedActionsGetters, {
                  dataLoadedActionsGetters: [],
                  eventsSummaryIdsToLoad: undefined,
                  rewardFxdxVault_AddRewardIdsToLoad: undefined,
                  rewardFxdxVault_SendRewardIdsToLoad: undefined,
                  rewardFxdxVault_TotalReservesIdsToLoad: undefined,
                  stakedFxdxVault_StakeIdsToLoad: undefined,
                  stakedFxdxVault_TotalReservesIdsToLoad: undefined,
                  stakedFxdxVault_UnstakeIdsToLoad: undefined
                }, (function (loadLayer, getLoadedActions) {
                    return Belt_Array.reduce(Curry._1(getLoadedActions, undefined), loadLayer, (function (loadLayer, action) {
                                  return Curry._1(action, loadLayer);
                                }));
                  }))
          };
  } else {
    return /* LastLayer */0;
  }
}

function executeLoadLayerComposer(entityExecutors, handleResponses) {
  return Curry._1(handleResponses, Belt_Array.map(entityExecutors, (function (param) {
                    return Curry._1(param.executor, param.idsToLoad);
                  })));
}

function executeNestedLoadLayersComposer(loadLayer, inMemoryStore, executeLoadLayerFn, then, unit) {
  return Curry._2(then, Curry._2(executeLoadLayerFn, loadLayer, inMemoryStore), (function (res) {
                if (res) {
                  return executeNestedLoadLayersComposer(res._0, inMemoryStore, executeLoadLayerFn, then, unit);
                } else {
                  return unit;
                }
              }));
}

function loadEntitiesToInMemStoreComposer(entityBatch, inMemoryStore, executeLoadLayerFn, then, unit) {
  return executeNestedLoadLayersComposer(getLoadLayer(entityBatch, inMemoryStore), inMemoryStore, executeLoadLayerFn, then, unit);
}

function makeEntityExecuterComposer(idsToLoad, dbReadFn, inMemStoreSetFn, store, getEntiyId, unit, then) {
  return {
          idsToLoad: idsToLoad,
          executor: (function (idsToLoad) {
              var idsToLoad$1 = Belt_SetString.toArray(idsToLoad);
              if (idsToLoad$1.length !== 0) {
                return Curry._2(then, Curry._1(dbReadFn, idsToLoad$1), (function (entities) {
                              Belt_Array.forEach(entities, (function (entity) {
                                      Curry._4(inMemStoreSetFn, store, Curry._1(getEntiyId, entity), /* Read */0, entity);
                                    }));
                            }));
              } else {
                return unit;
              }
            })
        };
}

function makeSqlEntityExecuter(idsToLoad, dbReadFn, inMemStoreSetFn, store, getEntiyId) {
  return makeEntityExecuterComposer(idsToLoad, Curry._1(dbReadFn, DbFunctions.sql), inMemStoreSetFn, store, getEntiyId, Promise.resolve(undefined), (function (prim0, prim1) {
                return prim0.then(Curry.__1(prim1));
              }));
}

function executeSqlLoadLayer(loadLayer, inMemoryStore) {
  var entityExecutors = [
    makeSqlEntityExecuter(loadLayer.eventsSummaryIdsToLoad, DbFunctions.EventsSummary.readEntities, set$3, inMemoryStore.eventsSummary, (function (entity) {
            return entity.id;
          })),
    makeSqlEntityExecuter(loadLayer.rewardFxdxVault_AddRewardIdsToLoad, DbFunctions.RewardFxdxVault_AddReward.readEntities, set$4, inMemoryStore.rewardFxdxVault_AddReward, (function (entity) {
            return entity.id;
          })),
    makeSqlEntityExecuter(loadLayer.rewardFxdxVault_SendRewardIdsToLoad, DbFunctions.RewardFxdxVault_SendReward.readEntities, set$5, inMemoryStore.rewardFxdxVault_SendReward, (function (entity) {
            return entity.id;
          })),
    makeSqlEntityExecuter(loadLayer.rewardFxdxVault_TotalReservesIdsToLoad, DbFunctions.RewardFxdxVault_TotalReserves.readEntities, set$6, inMemoryStore.rewardFxdxVault_TotalReserves, (function (entity) {
            return entity.id;
          })),
    makeSqlEntityExecuter(loadLayer.stakedFxdxVault_StakeIdsToLoad, DbFunctions.StakedFxdxVault_Stake.readEntities, set$7, inMemoryStore.stakedFxdxVault_Stake, (function (entity) {
            return entity.id;
          })),
    makeSqlEntityExecuter(loadLayer.stakedFxdxVault_TotalReservesIdsToLoad, DbFunctions.StakedFxdxVault_TotalReserves.readEntities, set$8, inMemoryStore.stakedFxdxVault_TotalReserves, (function (entity) {
            return entity.id;
          })),
    makeSqlEntityExecuter(loadLayer.stakedFxdxVault_UnstakeIdsToLoad, DbFunctions.StakedFxdxVault_Unstake.readEntities, set$9, inMemoryStore.stakedFxdxVault_Unstake, (function (entity) {
            return entity.id;
          }))
  ];
  var handleResponses = function (responses) {
    return Promise.all(responses).then(function (param) {
                return getNextLayer(loadLayer);
              });
  };
  return executeLoadLayerComposer(entityExecutors, handleResponses);
}

function loadEntitiesToInMemStore(entityBatch, inMemoryStore) {
  return loadEntitiesToInMemStoreComposer(entityBatch, inMemoryStore, executeSqlLoadLayer, (function (prim0, prim1) {
                return prim0.then(Curry.__1(prim1));
              }), Promise.resolve(undefined));
}

function executeEntityFunction(sql, rows, dbOp, dbFunction, getInputValFromRow) {
  var entityIds = Belt_Array.keepMap(rows, (function (row) {
          if (row.dbOp === dbOp) {
            return Caml_option.some(Curry._1(getInputValFromRow, row));
          }
          
        }));
  if (entityIds.length !== 0) {
    return Curry._2(dbFunction, sql, entityIds);
  } else {
    return Promise.resolve(undefined);
  }
}

function executeSet(param) {
  return function (param$1) {
    return function (param$2, param$3) {
      var param$4 = /* Set */1;
      return executeEntityFunction(param, param$1, param$4, param$2, param$3);
    };
  };
}

function executeDelete(param) {
  return function (param$1) {
    return function (param$2, param$3) {
      var param$4 = /* Delete */2;
      return executeEntityFunction(param, param$1, param$4, param$2, param$3);
    };
  };
}

function executeSetSchemaEntity(entityEncoder) {
  var arg = function (row) {
    return Curry._1(entityEncoder, row.entity);
  };
  return function (param) {
    var func = executeSet(param);
    return function (param) {
      var func$1 = Curry._1(func, param);
      return function (param) {
        return Curry._2(func$1, param, arg);
      };
    };
  };
}

async function executeBatch(sql, inMemoryStore) {
  var arg = Js_dict.values(inMemoryStore.eventSyncState.dict);
  var arg$1 = DbFunctions.EventSyncState.batchSet;
  var arg$2 = function (row) {
    return row.entity;
  };
  var setEventSyncState = function (param) {
    return Curry._2(executeSet(param)(arg), arg$1, arg$2);
  };
  var arg$3 = Js_dict.values(inMemoryStore.rawEvents.dict);
  var arg$4 = DbFunctions.RawEvents.batchSet;
  var arg$5 = function (row) {
    return row.entity;
  };
  var setRawEvents = function (param) {
    return Curry._2(executeSet(param)(arg$3), arg$4, arg$5);
  };
  var arg$6 = Js_dict.values(inMemoryStore.dynamicContractRegistry.dict);
  var arg$7 = DbFunctions.DynamicContractRegistry.batchSet;
  var arg$8 = function (row) {
    return row.entity;
  };
  var setDynamicContracts = function (param) {
    return Curry._2(executeSet(param)(arg$6), arg$7, arg$8);
  };
  var arg$9 = Js_dict.values(inMemoryStore.eventsSummary.dict);
  var arg$10 = DbFunctions.EventsSummary.batchDelete;
  var arg$11 = function (row) {
    return row.entity.id;
  };
  var deleteEventsSummarys = function (param) {
    return Curry._2(executeDelete(param)(arg$9), arg$10, arg$11);
  };
  var func = executeSetSchemaEntity(Types.eventsSummaryEntity_encode);
  var arg$12 = Js_dict.values(inMemoryStore.eventsSummary.dict);
  var arg$13 = DbFunctions.EventsSummary.batchSet;
  var setEventsSummarys = function (param) {
    return Curry._3(func, param, arg$12, arg$13);
  };
  var arg$14 = Js_dict.values(inMemoryStore.rewardFxdxVault_AddReward.dict);
  var arg$15 = DbFunctions.RewardFxdxVault_AddReward.batchDelete;
  var arg$16 = function (row) {
    return row.entity.id;
  };
  var deleteRewardFxdxVault_AddRewards = function (param) {
    return Curry._2(executeDelete(param)(arg$14), arg$15, arg$16);
  };
  var func$1 = executeSetSchemaEntity(Types.rewardFxdxVault_AddRewardEntity_encode);
  var arg$17 = Js_dict.values(inMemoryStore.rewardFxdxVault_AddReward.dict);
  var arg$18 = DbFunctions.RewardFxdxVault_AddReward.batchSet;
  var setRewardFxdxVault_AddRewards = function (param) {
    return Curry._3(func$1, param, arg$17, arg$18);
  };
  var arg$19 = Js_dict.values(inMemoryStore.rewardFxdxVault_SendReward.dict);
  var arg$20 = DbFunctions.RewardFxdxVault_SendReward.batchDelete;
  var arg$21 = function (row) {
    return row.entity.id;
  };
  var deleteRewardFxdxVault_SendRewards = function (param) {
    return Curry._2(executeDelete(param)(arg$19), arg$20, arg$21);
  };
  var func$2 = executeSetSchemaEntity(Types.rewardFxdxVault_SendRewardEntity_encode);
  var arg$22 = Js_dict.values(inMemoryStore.rewardFxdxVault_SendReward.dict);
  var arg$23 = DbFunctions.RewardFxdxVault_SendReward.batchSet;
  var setRewardFxdxVault_SendRewards = function (param) {
    return Curry._3(func$2, param, arg$22, arg$23);
  };
  var arg$24 = Js_dict.values(inMemoryStore.rewardFxdxVault_TotalReserves.dict);
  var arg$25 = DbFunctions.RewardFxdxVault_TotalReserves.batchDelete;
  var arg$26 = function (row) {
    return row.entity.id;
  };
  var deleteRewardFxdxVault_TotalReservess = function (param) {
    return Curry._2(executeDelete(param)(arg$24), arg$25, arg$26);
  };
  var func$3 = executeSetSchemaEntity(Types.rewardFxdxVault_TotalReservesEntity_encode);
  var arg$27 = Js_dict.values(inMemoryStore.rewardFxdxVault_TotalReserves.dict);
  var arg$28 = DbFunctions.RewardFxdxVault_TotalReserves.batchSet;
  var setRewardFxdxVault_TotalReservess = function (param) {
    return Curry._3(func$3, param, arg$27, arg$28);
  };
  var arg$29 = Js_dict.values(inMemoryStore.stakedFxdxVault_Stake.dict);
  var arg$30 = DbFunctions.StakedFxdxVault_Stake.batchDelete;
  var arg$31 = function (row) {
    return row.entity.id;
  };
  var deleteStakedFxdxVault_Stakes = function (param) {
    return Curry._2(executeDelete(param)(arg$29), arg$30, arg$31);
  };
  var func$4 = executeSetSchemaEntity(Types.stakedFxdxVault_StakeEntity_encode);
  var arg$32 = Js_dict.values(inMemoryStore.stakedFxdxVault_Stake.dict);
  var arg$33 = DbFunctions.StakedFxdxVault_Stake.batchSet;
  var setStakedFxdxVault_Stakes = function (param) {
    return Curry._3(func$4, param, arg$32, arg$33);
  };
  var arg$34 = Js_dict.values(inMemoryStore.stakedFxdxVault_TotalReserves.dict);
  var arg$35 = DbFunctions.StakedFxdxVault_TotalReserves.batchDelete;
  var arg$36 = function (row) {
    return row.entity.id;
  };
  var deleteStakedFxdxVault_TotalReservess = function (param) {
    return Curry._2(executeDelete(param)(arg$34), arg$35, arg$36);
  };
  var func$5 = executeSetSchemaEntity(Types.stakedFxdxVault_TotalReservesEntity_encode);
  var arg$37 = Js_dict.values(inMemoryStore.stakedFxdxVault_TotalReserves.dict);
  var arg$38 = DbFunctions.StakedFxdxVault_TotalReserves.batchSet;
  var setStakedFxdxVault_TotalReservess = function (param) {
    return Curry._3(func$5, param, arg$37, arg$38);
  };
  var arg$39 = Js_dict.values(inMemoryStore.stakedFxdxVault_Unstake.dict);
  var arg$40 = DbFunctions.StakedFxdxVault_Unstake.batchDelete;
  var arg$41 = function (row) {
    return row.entity.id;
  };
  var deleteStakedFxdxVault_Unstakes = function (param) {
    return Curry._2(executeDelete(param)(arg$39), arg$40, arg$41);
  };
  var func$6 = executeSetSchemaEntity(Types.stakedFxdxVault_UnstakeEntity_encode);
  var arg$42 = Js_dict.values(inMemoryStore.stakedFxdxVault_Unstake.dict);
  var arg$43 = DbFunctions.StakedFxdxVault_Unstake.batchSet;
  var setStakedFxdxVault_Unstakes = function (param) {
    return Curry._3(func$6, param, arg$42, arg$43);
  };
  return await sql.begin(function (sql) {
              return Belt_Array.map([
                          setEventSyncState,
                          setRawEvents,
                          setDynamicContracts,
                          deleteEventsSummarys,
                          setEventsSummarys,
                          deleteRewardFxdxVault_AddRewards,
                          setRewardFxdxVault_AddRewards,
                          deleteRewardFxdxVault_SendRewards,
                          setRewardFxdxVault_SendRewards,
                          deleteRewardFxdxVault_TotalReservess,
                          setRewardFxdxVault_TotalReservess,
                          deleteStakedFxdxVault_Stakes,
                          setStakedFxdxVault_Stakes,
                          deleteStakedFxdxVault_TotalReservess,
                          setStakedFxdxVault_TotalReservess,
                          deleteStakedFxdxVault_Unstakes,
                          setStakedFxdxVault_Unstakes
                        ], (function (dbFunc) {
                            return Curry._1(dbFunc, sql);
                          }));
            });
}

exports.InMemoryStore = InMemoryStore;
exports.LoadLayer = LoadLayer;
exports.eventsSummaryLinkedEntityLoader = eventsSummaryLinkedEntityLoader;
exports.rewardFxdxVault_AddRewardLinkedEntityLoader = rewardFxdxVault_AddRewardLinkedEntityLoader;
exports.rewardFxdxVault_SendRewardLinkedEntityLoader = rewardFxdxVault_SendRewardLinkedEntityLoader;
exports.rewardFxdxVault_TotalReservesLinkedEntityLoader = rewardFxdxVault_TotalReservesLinkedEntityLoader;
exports.stakedFxdxVault_StakeLinkedEntityLoader = stakedFxdxVault_StakeLinkedEntityLoader;
exports.stakedFxdxVault_TotalReservesLinkedEntityLoader = stakedFxdxVault_TotalReservesLinkedEntityLoader;
exports.stakedFxdxVault_UnstakeLinkedEntityLoader = stakedFxdxVault_UnstakeLinkedEntityLoader;
exports.getLoadLayer = getLoadLayer;
exports.getNextLayer = getNextLayer;
exports.executeLoadLayerComposer = executeLoadLayerComposer;
exports.executeNestedLoadLayersComposer = executeNestedLoadLayersComposer;
exports.loadEntitiesToInMemStoreComposer = loadEntitiesToInMemStoreComposer;
exports.makeEntityExecuterComposer = makeEntityExecuterComposer;
exports.makeSqlEntityExecuter = makeSqlEntityExecuter;
exports.executeSqlLoadLayer = executeSqlLoadLayer;
exports.loadEntitiesToInMemStore = loadEntitiesToInMemStore;
exports.executeEntityFunction = executeEntityFunction;
exports.executeSet = executeSet;
exports.executeDelete = executeDelete;
exports.executeSetSchemaEntity = executeSetSchemaEntity;
exports.executeBatch = executeBatch;
/* Types Not a pure module */
