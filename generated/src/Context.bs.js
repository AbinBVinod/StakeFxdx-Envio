// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var IO = require("./IO.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Logging = require("./Logging.bs.js");
var EventUtils = require("./EventUtils.bs.js");

function contextCreator(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "RewardFxdxVault.AddReward.context"
      });
  var contextLogger_debug = function (message) {
    logger$1.udebug(message);
  };
  var contextLogger_info = function (message) {
    logger$1.uinfo(message);
  };
  var contextLogger_warn = function (message) {
    logger$1.uwarn(message);
  };
  var contextLogger_error = function (message) {
    logger$1.uerror(message);
  };
  var contextLogger_errorWithExn = function (exn, message) {
    logger$1.uerror(exn, message);
  };
  var contextLogger = {
    debug: contextLogger_debug,
    info: contextLogger_info,
    warn: contextLogger_warn,
    error: contextLogger_error,
    errorWithExn: contextLogger_errorWithExn
  };
  var optSetOfIds_eventsSummary = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addRewardFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "RewardFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      }),
    addStakedFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "StakedFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_EventsSummary = {
    load: (function (id) {
        optSetOfIds_eventsSummary.add(id);
        entitiesToLoad.push({
              TAG: /* EventsSummaryRead */0,
              _0: id
            });
      })
  };
  var loaderContext = {
    log: contextLogger,
    contractRegistration: loaderContext_contractRegistration,
    EventsSummary: loaderContext_EventsSummary
  };
  var getHandlerContext = function (param) {
    return {
            log: contextLogger,
            EventsSummary: {
              get: (function (id) {
                  if (optSetOfIds_eventsSummary.has(id)) {
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  } else {
                    Logging.warn("The loader for a \"EventsSummary\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.eventsSummary.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  }
                }),
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.EventsSummary.set, inMemoryStore.eventsSummary, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(eventsSummary) with ID " + id + ".");
                })
            },
            RewardFxdxVault_AddReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_AddReward.set, inMemoryStore.rewardFxdxVault_AddReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_AddReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_SendReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_SendReward.set, inMemoryStore.rewardFxdxVault_SendReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_SendReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_TotalReserves.set, inMemoryStore.rewardFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Stake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Stake.set, inMemoryStore.stakedFxdxVault_Stake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Stake) with ID " + id + ".");
                })
            },
            StakedFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_TotalReserves.set, inMemoryStore.stakedFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Unstake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Unstake.set, inMemoryStore.stakedFxdxVault_Unstake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Unstake) with ID " + id + ".");
                })
            }
          };
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getHandlerContext: getHandlerContext,
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var AddRewardEvent = {
  contextCreator: contextCreator
};

function contextCreator$1(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "RewardFxdxVault.SendReward.context"
      });
  var contextLogger_debug = function (message) {
    logger$1.udebug(message);
  };
  var contextLogger_info = function (message) {
    logger$1.uinfo(message);
  };
  var contextLogger_warn = function (message) {
    logger$1.uwarn(message);
  };
  var contextLogger_error = function (message) {
    logger$1.uerror(message);
  };
  var contextLogger_errorWithExn = function (exn, message) {
    logger$1.uerror(exn, message);
  };
  var contextLogger = {
    debug: contextLogger_debug,
    info: contextLogger_info,
    warn: contextLogger_warn,
    error: contextLogger_error,
    errorWithExn: contextLogger_errorWithExn
  };
  var optSetOfIds_eventsSummary = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addRewardFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "RewardFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      }),
    addStakedFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "StakedFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_EventsSummary = {
    load: (function (id) {
        optSetOfIds_eventsSummary.add(id);
        entitiesToLoad.push({
              TAG: /* EventsSummaryRead */0,
              _0: id
            });
      })
  };
  var loaderContext = {
    log: contextLogger,
    contractRegistration: loaderContext_contractRegistration,
    EventsSummary: loaderContext_EventsSummary
  };
  var getHandlerContext = function (param) {
    return {
            log: contextLogger,
            EventsSummary: {
              get: (function (id) {
                  if (optSetOfIds_eventsSummary.has(id)) {
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  } else {
                    Logging.warn("The loader for a \"EventsSummary\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.eventsSummary.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  }
                }),
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.EventsSummary.set, inMemoryStore.eventsSummary, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(eventsSummary) with ID " + id + ".");
                })
            },
            RewardFxdxVault_AddReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_AddReward.set, inMemoryStore.rewardFxdxVault_AddReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_AddReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_SendReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_SendReward.set, inMemoryStore.rewardFxdxVault_SendReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_SendReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_TotalReserves.set, inMemoryStore.rewardFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Stake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Stake.set, inMemoryStore.stakedFxdxVault_Stake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Stake) with ID " + id + ".");
                })
            },
            StakedFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_TotalReserves.set, inMemoryStore.stakedFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Unstake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Unstake.set, inMemoryStore.stakedFxdxVault_Unstake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Unstake) with ID " + id + ".");
                })
            }
          };
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getHandlerContext: getHandlerContext,
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var SendRewardEvent = {
  contextCreator: contextCreator$1
};

function contextCreator$2(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "RewardFxdxVault.TotalReserves.context"
      });
  var contextLogger_debug = function (message) {
    logger$1.udebug(message);
  };
  var contextLogger_info = function (message) {
    logger$1.uinfo(message);
  };
  var contextLogger_warn = function (message) {
    logger$1.uwarn(message);
  };
  var contextLogger_error = function (message) {
    logger$1.uerror(message);
  };
  var contextLogger_errorWithExn = function (exn, message) {
    logger$1.uerror(exn, message);
  };
  var contextLogger = {
    debug: contextLogger_debug,
    info: contextLogger_info,
    warn: contextLogger_warn,
    error: contextLogger_error,
    errorWithExn: contextLogger_errorWithExn
  };
  var optSetOfIds_eventsSummary = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addRewardFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "RewardFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      }),
    addStakedFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "StakedFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_EventsSummary = {
    load: (function (id) {
        optSetOfIds_eventsSummary.add(id);
        entitiesToLoad.push({
              TAG: /* EventsSummaryRead */0,
              _0: id
            });
      })
  };
  var loaderContext = {
    log: contextLogger,
    contractRegistration: loaderContext_contractRegistration,
    EventsSummary: loaderContext_EventsSummary
  };
  var getHandlerContext = function (param) {
    return {
            log: contextLogger,
            EventsSummary: {
              get: (function (id) {
                  if (optSetOfIds_eventsSummary.has(id)) {
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  } else {
                    Logging.warn("The loader for a \"EventsSummary\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.eventsSummary.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  }
                }),
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.EventsSummary.set, inMemoryStore.eventsSummary, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(eventsSummary) with ID " + id + ".");
                })
            },
            RewardFxdxVault_AddReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_AddReward.set, inMemoryStore.rewardFxdxVault_AddReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_AddReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_SendReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_SendReward.set, inMemoryStore.rewardFxdxVault_SendReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_SendReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_TotalReserves.set, inMemoryStore.rewardFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Stake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Stake.set, inMemoryStore.stakedFxdxVault_Stake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Stake) with ID " + id + ".");
                })
            },
            StakedFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_TotalReserves.set, inMemoryStore.stakedFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Unstake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Unstake.set, inMemoryStore.stakedFxdxVault_Unstake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Unstake) with ID " + id + ".");
                })
            }
          };
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getHandlerContext: getHandlerContext,
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var TotalReservesEvent = {
  contextCreator: contextCreator$2
};

var RewardFxdxVaultContract = {
  AddRewardEvent: AddRewardEvent,
  SendRewardEvent: SendRewardEvent,
  TotalReservesEvent: TotalReservesEvent
};

function contextCreator$3(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "StakedFxdxVault.Stake.context"
      });
  var contextLogger_debug = function (message) {
    logger$1.udebug(message);
  };
  var contextLogger_info = function (message) {
    logger$1.uinfo(message);
  };
  var contextLogger_warn = function (message) {
    logger$1.uwarn(message);
  };
  var contextLogger_error = function (message) {
    logger$1.uerror(message);
  };
  var contextLogger_errorWithExn = function (exn, message) {
    logger$1.uerror(exn, message);
  };
  var contextLogger = {
    debug: contextLogger_debug,
    info: contextLogger_info,
    warn: contextLogger_warn,
    error: contextLogger_error,
    errorWithExn: contextLogger_errorWithExn
  };
  var optSetOfIds_eventsSummary = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addRewardFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "RewardFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      }),
    addStakedFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "StakedFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_EventsSummary = {
    load: (function (id) {
        optSetOfIds_eventsSummary.add(id);
        entitiesToLoad.push({
              TAG: /* EventsSummaryRead */0,
              _0: id
            });
      })
  };
  var loaderContext = {
    log: contextLogger,
    contractRegistration: loaderContext_contractRegistration,
    EventsSummary: loaderContext_EventsSummary
  };
  var getHandlerContext = function (param) {
    return {
            log: contextLogger,
            EventsSummary: {
              get: (function (id) {
                  if (optSetOfIds_eventsSummary.has(id)) {
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  } else {
                    Logging.warn("The loader for a \"EventsSummary\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.eventsSummary.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  }
                }),
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.EventsSummary.set, inMemoryStore.eventsSummary, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(eventsSummary) with ID " + id + ".");
                })
            },
            RewardFxdxVault_AddReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_AddReward.set, inMemoryStore.rewardFxdxVault_AddReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_AddReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_SendReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_SendReward.set, inMemoryStore.rewardFxdxVault_SendReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_SendReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_TotalReserves.set, inMemoryStore.rewardFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Stake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Stake.set, inMemoryStore.stakedFxdxVault_Stake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Stake) with ID " + id + ".");
                })
            },
            StakedFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_TotalReserves.set, inMemoryStore.stakedFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Unstake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Unstake.set, inMemoryStore.stakedFxdxVault_Unstake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Unstake) with ID " + id + ".");
                })
            }
          };
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getHandlerContext: getHandlerContext,
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var StakeEvent = {
  contextCreator: contextCreator$3
};

function contextCreator$4(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "StakedFxdxVault.TotalReserves.context"
      });
  var contextLogger_debug = function (message) {
    logger$1.udebug(message);
  };
  var contextLogger_info = function (message) {
    logger$1.uinfo(message);
  };
  var contextLogger_warn = function (message) {
    logger$1.uwarn(message);
  };
  var contextLogger_error = function (message) {
    logger$1.uerror(message);
  };
  var contextLogger_errorWithExn = function (exn, message) {
    logger$1.uerror(exn, message);
  };
  var contextLogger = {
    debug: contextLogger_debug,
    info: contextLogger_info,
    warn: contextLogger_warn,
    error: contextLogger_error,
    errorWithExn: contextLogger_errorWithExn
  };
  var optSetOfIds_eventsSummary = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addRewardFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "RewardFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      }),
    addStakedFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "StakedFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_EventsSummary = {
    load: (function (id) {
        optSetOfIds_eventsSummary.add(id);
        entitiesToLoad.push({
              TAG: /* EventsSummaryRead */0,
              _0: id
            });
      })
  };
  var loaderContext = {
    log: contextLogger,
    contractRegistration: loaderContext_contractRegistration,
    EventsSummary: loaderContext_EventsSummary
  };
  var getHandlerContext = function (param) {
    return {
            log: contextLogger,
            EventsSummary: {
              get: (function (id) {
                  if (optSetOfIds_eventsSummary.has(id)) {
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  } else {
                    Logging.warn("The loader for a \"EventsSummary\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.eventsSummary.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  }
                }),
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.EventsSummary.set, inMemoryStore.eventsSummary, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(eventsSummary) with ID " + id + ".");
                })
            },
            RewardFxdxVault_AddReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_AddReward.set, inMemoryStore.rewardFxdxVault_AddReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_AddReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_SendReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_SendReward.set, inMemoryStore.rewardFxdxVault_SendReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_SendReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_TotalReserves.set, inMemoryStore.rewardFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Stake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Stake.set, inMemoryStore.stakedFxdxVault_Stake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Stake) with ID " + id + ".");
                })
            },
            StakedFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_TotalReserves.set, inMemoryStore.stakedFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Unstake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Unstake.set, inMemoryStore.stakedFxdxVault_Unstake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Unstake) with ID " + id + ".");
                })
            }
          };
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getHandlerContext: getHandlerContext,
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var TotalReservesEvent$1 = {
  contextCreator: contextCreator$4
};

function contextCreator$5(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "StakedFxdxVault.Unstake.context"
      });
  var contextLogger_debug = function (message) {
    logger$1.udebug(message);
  };
  var contextLogger_info = function (message) {
    logger$1.uinfo(message);
  };
  var contextLogger_warn = function (message) {
    logger$1.uwarn(message);
  };
  var contextLogger_error = function (message) {
    logger$1.uerror(message);
  };
  var contextLogger_errorWithExn = function (exn, message) {
    logger$1.uerror(exn, message);
  };
  var contextLogger = {
    debug: contextLogger_debug,
    info: contextLogger_info,
    warn: contextLogger_warn,
    error: contextLogger_error,
    errorWithExn: contextLogger_errorWithExn
  };
  var optSetOfIds_eventsSummary = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addRewardFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "RewardFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      }),
    addStakedFxdxVault: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "StakedFxdxVault"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._4(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_EventsSummary = {
    load: (function (id) {
        optSetOfIds_eventsSummary.add(id);
        entitiesToLoad.push({
              TAG: /* EventsSummaryRead */0,
              _0: id
            });
      })
  };
  var loaderContext = {
    log: contextLogger,
    contractRegistration: loaderContext_contractRegistration,
    EventsSummary: loaderContext_EventsSummary
  };
  var getHandlerContext = function (param) {
    return {
            log: contextLogger,
            EventsSummary: {
              get: (function (id) {
                  if (optSetOfIds_eventsSummary.has(id)) {
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  } else {
                    Logging.warn("The loader for a \"EventsSummary\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.eventsSummary.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                    return Curry._2(IO.InMemoryStore.EventsSummary.get, inMemoryStore.eventsSummary, id);
                  }
                }),
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.EventsSummary.set, inMemoryStore.eventsSummary, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(eventsSummary) with ID " + id + ".");
                })
            },
            RewardFxdxVault_AddReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_AddReward.set, inMemoryStore.rewardFxdxVault_AddReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_AddReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_SendReward: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_SendReward.set, inMemoryStore.rewardFxdxVault_SendReward, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_SendReward) with ID " + id + ".");
                })
            },
            RewardFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.RewardFxdxVault_TotalReserves.set, inMemoryStore.rewardFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(rewardFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Stake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Stake.set, inMemoryStore.stakedFxdxVault_Stake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Stake) with ID " + id + ".");
                })
            },
            StakedFxdxVault_TotalReserves: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_TotalReserves.set, inMemoryStore.stakedFxdxVault_TotalReserves, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_TotalReserves) with ID " + id + ".");
                })
            },
            StakedFxdxVault_Unstake: {
              set: (function (entity) {
                  Curry._4(IO.InMemoryStore.StakedFxdxVault_Unstake.set, inMemoryStore.stakedFxdxVault_Unstake, entity.id, /* Set */1, entity);
                }),
              delete: (function (id) {
                  Logging.warn("[unimplemented delete] can't delete entity(stakedFxdxVault_Unstake) with ID " + id + ".");
                })
            }
          };
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getHandlerContext: getHandlerContext,
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var UnstakeEvent = {
  contextCreator: contextCreator$5
};

var StakedFxdxVaultContract = {
  StakeEvent: StakeEvent,
  TotalReservesEvent: TotalReservesEvent$1,
  UnstakeEvent: UnstakeEvent
};

exports.RewardFxdxVaultContract = RewardFxdxVaultContract;
exports.StakedFxdxVaultContract = StakedFxdxVaultContract;
/* IO Not a pure module */
